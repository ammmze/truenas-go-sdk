/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// UpdateManual1 struct for UpdateManual1
type UpdateManual1 struct {
	Cleanup *bool `json:"cleanup,omitempty"`
}

// NewUpdateManual1 instantiates a new UpdateManual1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateManual1() *UpdateManual1 {
	this := UpdateManual1{}
	var cleanup bool = true
	this.Cleanup = &cleanup
	return &this
}

// NewUpdateManual1WithDefaults instantiates a new UpdateManual1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateManual1WithDefaults() *UpdateManual1 {
	this := UpdateManual1{}
	var cleanup bool = true
	this.Cleanup = &cleanup
	return &this
}

// GetCleanup returns the Cleanup field value if set, zero value otherwise.
func (o *UpdateManual1) GetCleanup() bool {
	if o == nil || o.Cleanup == nil {
		var ret bool
		return ret
	}
	return *o.Cleanup
}

// GetCleanupOk returns a tuple with the Cleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateManual1) GetCleanupOk() (*bool, bool) {
	if o == nil || o.Cleanup == nil {
		return nil, false
	}
	return o.Cleanup, true
}

// HasCleanup returns a boolean if a field has been set.
func (o *UpdateManual1) HasCleanup() bool {
	if o != nil && o.Cleanup != nil {
		return true
	}

	return false
}

// SetCleanup gets a reference to the given bool and assigns it to the Cleanup field.
func (o *UpdateManual1) SetCleanup(v bool) {
	o.Cleanup = &v
}

func (o UpdateManual1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cleanup != nil {
		toSerialize["cleanup"] = o.Cleanup
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateManual1 struct {
	value *UpdateManual1
	isSet bool
}

func (v NullableUpdateManual1) Get() *UpdateManual1 {
	return v.value
}

func (v *NullableUpdateManual1) Set(val *UpdateManual1) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateManual1) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateManual1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateManual1(val *UpdateManual1) *NullableUpdateManual1 {
	return &NullableUpdateManual1{value: val, isSet: true}
}

func (v NullableUpdateManual1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateManual1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// JailUpdateToLatestPatch struct for JailUpdateToLatestPatch
type JailUpdateToLatestPatch struct {
	Jail *string `json:"jail,omitempty"`
	UpdatePkgs *bool `json:"update_pkgs,omitempty"`
}

// NewJailUpdateToLatestPatch instantiates a new JailUpdateToLatestPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJailUpdateToLatestPatch() *JailUpdateToLatestPatch {
	this := JailUpdateToLatestPatch{}
	var updatePkgs bool = false
	this.UpdatePkgs = &updatePkgs
	return &this
}

// NewJailUpdateToLatestPatchWithDefaults instantiates a new JailUpdateToLatestPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJailUpdateToLatestPatchWithDefaults() *JailUpdateToLatestPatch {
	this := JailUpdateToLatestPatch{}
	var updatePkgs bool = false
	this.UpdatePkgs = &updatePkgs
	return &this
}

// GetJail returns the Jail field value if set, zero value otherwise.
func (o *JailUpdateToLatestPatch) GetJail() string {
	if o == nil || o.Jail == nil {
		var ret string
		return ret
	}
	return *o.Jail
}

// GetJailOk returns a tuple with the Jail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailUpdateToLatestPatch) GetJailOk() (*string, bool) {
	if o == nil || o.Jail == nil {
		return nil, false
	}
	return o.Jail, true
}

// HasJail returns a boolean if a field has been set.
func (o *JailUpdateToLatestPatch) HasJail() bool {
	if o != nil && o.Jail != nil {
		return true
	}

	return false
}

// SetJail gets a reference to the given string and assigns it to the Jail field.
func (o *JailUpdateToLatestPatch) SetJail(v string) {
	o.Jail = &v
}

// GetUpdatePkgs returns the UpdatePkgs field value if set, zero value otherwise.
func (o *JailUpdateToLatestPatch) GetUpdatePkgs() bool {
	if o == nil || o.UpdatePkgs == nil {
		var ret bool
		return ret
	}
	return *o.UpdatePkgs
}

// GetUpdatePkgsOk returns a tuple with the UpdatePkgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JailUpdateToLatestPatch) GetUpdatePkgsOk() (*bool, bool) {
	if o == nil || o.UpdatePkgs == nil {
		return nil, false
	}
	return o.UpdatePkgs, true
}

// HasUpdatePkgs returns a boolean if a field has been set.
func (o *JailUpdateToLatestPatch) HasUpdatePkgs() bool {
	if o != nil && o.UpdatePkgs != nil {
		return true
	}

	return false
}

// SetUpdatePkgs gets a reference to the given bool and assigns it to the UpdatePkgs field.
func (o *JailUpdateToLatestPatch) SetUpdatePkgs(v bool) {
	o.UpdatePkgs = &v
}

func (o JailUpdateToLatestPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Jail != nil {
		toSerialize["jail"] = o.Jail
	}
	if o.UpdatePkgs != nil {
		toSerialize["update_pkgs"] = o.UpdatePkgs
	}
	return json.Marshal(toSerialize)
}

type NullableJailUpdateToLatestPatch struct {
	value *JailUpdateToLatestPatch
	isSet bool
}

func (v NullableJailUpdateToLatestPatch) Get() *JailUpdateToLatestPatch {
	return v.value
}

func (v *NullableJailUpdateToLatestPatch) Set(val *JailUpdateToLatestPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableJailUpdateToLatestPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableJailUpdateToLatestPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJailUpdateToLatestPatch(val *JailUpdateToLatestPatch) *NullableJailUpdateToLatestPatch {
	return &NullableJailUpdateToLatestPatch{value: val, isSet: true}
}

func (v NullableJailUpdateToLatestPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJailUpdateToLatestPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// CertExtensions2 `cert_extensions` can be specified if specific extensions are to be set in the newly signed certificate.
type CertExtensions2 struct {
	BasicConstraints       *BasicConstraints       `json:"BasicConstraints,omitempty"`
	AuthorityKeyIdentifier *AuthorityKeyIdentifier `json:"AuthorityKeyIdentifier,omitempty"`
	ExtendedKeyUsage       *ExtendedKeyUsage       `json:"ExtendedKeyUsage,omitempty"`
	KeyUsage               *KeyUsage               `json:"KeyUsage,omitempty"`
}

// NewCertExtensions2 instantiates a new CertExtensions2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertExtensions2() *CertExtensions2 {
	this := CertExtensions2{}
	return &this
}

// NewCertExtensions2WithDefaults instantiates a new CertExtensions2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertExtensions2WithDefaults() *CertExtensions2 {
	this := CertExtensions2{}
	return &this
}

// GetBasicConstraints returns the BasicConstraints field value if set, zero value otherwise.
func (o *CertExtensions2) GetBasicConstraints() BasicConstraints {
	if o == nil || o.BasicConstraints == nil {
		var ret BasicConstraints
		return ret
	}
	return *o.BasicConstraints
}

// GetBasicConstraintsOk returns a tuple with the BasicConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertExtensions2) GetBasicConstraintsOk() (*BasicConstraints, bool) {
	if o == nil || o.BasicConstraints == nil {
		return nil, false
	}
	return o.BasicConstraints, true
}

// HasBasicConstraints returns a boolean if a field has been set.
func (o *CertExtensions2) HasBasicConstraints() bool {
	if o != nil && o.BasicConstraints != nil {
		return true
	}

	return false
}

// SetBasicConstraints gets a reference to the given BasicConstraints and assigns it to the BasicConstraints field.
func (o *CertExtensions2) SetBasicConstraints(v BasicConstraints) {
	o.BasicConstraints = &v
}

// GetAuthorityKeyIdentifier returns the AuthorityKeyIdentifier field value if set, zero value otherwise.
func (o *CertExtensions2) GetAuthorityKeyIdentifier() AuthorityKeyIdentifier {
	if o == nil || o.AuthorityKeyIdentifier == nil {
		var ret AuthorityKeyIdentifier
		return ret
	}
	return *o.AuthorityKeyIdentifier
}

// GetAuthorityKeyIdentifierOk returns a tuple with the AuthorityKeyIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertExtensions2) GetAuthorityKeyIdentifierOk() (*AuthorityKeyIdentifier, bool) {
	if o == nil || o.AuthorityKeyIdentifier == nil {
		return nil, false
	}
	return o.AuthorityKeyIdentifier, true
}

// HasAuthorityKeyIdentifier returns a boolean if a field has been set.
func (o *CertExtensions2) HasAuthorityKeyIdentifier() bool {
	if o != nil && o.AuthorityKeyIdentifier != nil {
		return true
	}

	return false
}

// SetAuthorityKeyIdentifier gets a reference to the given AuthorityKeyIdentifier and assigns it to the AuthorityKeyIdentifier field.
func (o *CertExtensions2) SetAuthorityKeyIdentifier(v AuthorityKeyIdentifier) {
	o.AuthorityKeyIdentifier = &v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *CertExtensions2) GetExtendedKeyUsage() ExtendedKeyUsage {
	if o == nil || o.ExtendedKeyUsage == nil {
		var ret ExtendedKeyUsage
		return ret
	}
	return *o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertExtensions2) GetExtendedKeyUsageOk() (*ExtendedKeyUsage, bool) {
	if o == nil || o.ExtendedKeyUsage == nil {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *CertExtensions2) HasExtendedKeyUsage() bool {
	if o != nil && o.ExtendedKeyUsage != nil {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given ExtendedKeyUsage and assigns it to the ExtendedKeyUsage field.
func (o *CertExtensions2) SetExtendedKeyUsage(v ExtendedKeyUsage) {
	o.ExtendedKeyUsage = &v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertExtensions2) GetKeyUsage() KeyUsage {
	if o == nil || o.KeyUsage == nil {
		var ret KeyUsage
		return ret
	}
	return *o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertExtensions2) GetKeyUsageOk() (*KeyUsage, bool) {
	if o == nil || o.KeyUsage == nil {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertExtensions2) HasKeyUsage() bool {
	if o != nil && o.KeyUsage != nil {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given KeyUsage and assigns it to the KeyUsage field.
func (o *CertExtensions2) SetKeyUsage(v KeyUsage) {
	o.KeyUsage = &v
}

func (o CertExtensions2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BasicConstraints != nil {
		toSerialize["BasicConstraints"] = o.BasicConstraints
	}
	if o.AuthorityKeyIdentifier != nil {
		toSerialize["AuthorityKeyIdentifier"] = o.AuthorityKeyIdentifier
	}
	if o.ExtendedKeyUsage != nil {
		toSerialize["ExtendedKeyUsage"] = o.ExtendedKeyUsage
	}
	if o.KeyUsage != nil {
		toSerialize["KeyUsage"] = o.KeyUsage
	}
	return json.Marshal(toSerialize)
}

type NullableCertExtensions2 struct {
	value *CertExtensions2
	isSet bool
}

func (v NullableCertExtensions2) Get() *CertExtensions2 {
	return v.value
}

func (v *NullableCertExtensions2) Set(val *CertExtensions2) {
	v.value = val
	v.isSet = true
}

func (v NullableCertExtensions2) IsSet() bool {
	return v.isSet
}

func (v *NullableCertExtensions2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertExtensions2(val *CertExtensions2) *NullableCertExtensions2 {
	return &NullableCertExtensions2{value: val, isSet: true}
}

func (v NullableCertExtensions2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertExtensions2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

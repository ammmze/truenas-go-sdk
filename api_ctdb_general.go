/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// CtdbGeneralApiService CtdbGeneralApi service
type CtdbGeneralApiService service

type CtdbGeneralApiCtdbGeneralHealthyGetRequest struct {
	ctx        context.Context
	ApiService *CtdbGeneralApiService
}

func (r CtdbGeneralApiCtdbGeneralHealthyGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbGeneralHealthyGetExecute(r)
}

/*
CtdbGeneralHealthyGet Method for CtdbGeneralHealthyGet

Returns a boolean if the ctdb cluster is healthy.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbGeneralApiCtdbGeneralHealthyGetRequest
*/
func (a *CtdbGeneralApiService) CtdbGeneralHealthyGet(ctx context.Context) CtdbGeneralApiCtdbGeneralHealthyGetRequest {
	return CtdbGeneralApiCtdbGeneralHealthyGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbGeneralApiService) CtdbGeneralHealthyGetExecute(r CtdbGeneralApiCtdbGeneralHealthyGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbGeneralApiService.CtdbGeneralHealthyGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/general/healthy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbGeneralApiCtdbGeneralIpsPostRequest struct {
	ctx             context.Context
	ApiService      *CtdbGeneralApiService
	ctdbGeneralIps0 *CtdbGeneralIps0
}

func (r CtdbGeneralApiCtdbGeneralIpsPostRequest) CtdbGeneralIps0(ctdbGeneralIps0 CtdbGeneralIps0) CtdbGeneralApiCtdbGeneralIpsPostRequest {
	r.ctdbGeneralIps0 = &ctdbGeneralIps0
	return r
}

func (r CtdbGeneralApiCtdbGeneralIpsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbGeneralIpsPostExecute(r)
}

/*
CtdbGeneralIpsPost Method for CtdbGeneralIpsPost

Return a list of public ip addresses in the ctdb cluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbGeneralApiCtdbGeneralIpsPostRequest
*/
func (a *CtdbGeneralApiService) CtdbGeneralIpsPost(ctx context.Context) CtdbGeneralApiCtdbGeneralIpsPostRequest {
	return CtdbGeneralApiCtdbGeneralIpsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbGeneralApiService) CtdbGeneralIpsPostExecute(r CtdbGeneralApiCtdbGeneralIpsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbGeneralApiService.CtdbGeneralIpsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/general/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbGeneralIps0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbGeneralApiCtdbGeneralListnodesGetRequest struct {
	ctx        context.Context
	ApiService *CtdbGeneralApiService
}

func (r CtdbGeneralApiCtdbGeneralListnodesGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbGeneralListnodesGetExecute(r)
}

/*
CtdbGeneralListnodesGet Method for CtdbGeneralListnodesGet

Return a list of nodes in the ctdb cluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbGeneralApiCtdbGeneralListnodesGetRequest
*/
func (a *CtdbGeneralApiService) CtdbGeneralListnodesGet(ctx context.Context) CtdbGeneralApiCtdbGeneralListnodesGetRequest {
	return CtdbGeneralApiCtdbGeneralListnodesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbGeneralApiService) CtdbGeneralListnodesGetExecute(r CtdbGeneralApiCtdbGeneralListnodesGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbGeneralApiService.CtdbGeneralListnodesGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/general/listnodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbGeneralApiCtdbGeneralPnnGetRequest struct {
	ctx        context.Context
	ApiService *CtdbGeneralApiService
}

func (r CtdbGeneralApiCtdbGeneralPnnGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbGeneralPnnGetExecute(r)
}

/*
CtdbGeneralPnnGet Method for CtdbGeneralPnnGet

Return node number for this node. This value should be static for life of cluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbGeneralApiCtdbGeneralPnnGetRequest
*/
func (a *CtdbGeneralApiService) CtdbGeneralPnnGet(ctx context.Context) CtdbGeneralApiCtdbGeneralPnnGetRequest {
	return CtdbGeneralApiCtdbGeneralPnnGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbGeneralApiService) CtdbGeneralPnnGetExecute(r CtdbGeneralApiCtdbGeneralPnnGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbGeneralApiService.CtdbGeneralPnnGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/general/pnn"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbGeneralApiCtdbGeneralStatusPostRequest struct {
	ctx                context.Context
	ApiService         *CtdbGeneralApiService
	ctdbGeneralStatus0 *CtdbGeneralStatus0
}

func (r CtdbGeneralApiCtdbGeneralStatusPostRequest) CtdbGeneralStatus0(ctdbGeneralStatus0 CtdbGeneralStatus0) CtdbGeneralApiCtdbGeneralStatusPostRequest {
	r.ctdbGeneralStatus0 = &ctdbGeneralStatus0
	return r
}

func (r CtdbGeneralApiCtdbGeneralStatusPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbGeneralStatusPostExecute(r)
}

/*
CtdbGeneralStatusPost Method for CtdbGeneralStatusPost

List the status of nodes in the ctdb cluster.

`all_nodes`: Boolean if True, return status
    for all nodes in the cluster else return
    status of this node.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbGeneralApiCtdbGeneralStatusPostRequest
*/
func (a *CtdbGeneralApiService) CtdbGeneralStatusPost(ctx context.Context) CtdbGeneralApiCtdbGeneralStatusPostRequest {
	return CtdbGeneralApiCtdbGeneralStatusPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbGeneralApiService) CtdbGeneralStatusPostExecute(r CtdbGeneralApiCtdbGeneralStatusPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbGeneralApiService.CtdbGeneralStatusPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/general/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbGeneralStatus0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

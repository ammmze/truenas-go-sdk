/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// ChartReleaseScale struct for ChartReleaseScale
type ChartReleaseScale struct {
	// Scale a `release_name` chart release to `scale_options.replica_count` specified.
	ReleaseName          *string             `json:"release_name,omitempty"`
	ScaleOptions         *ChartReleaseScale1 `json:"scale_options,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChartReleaseScale ChartReleaseScale

// NewChartReleaseScale instantiates a new ChartReleaseScale object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartReleaseScale() *ChartReleaseScale {
	this := ChartReleaseScale{}
	return &this
}

// NewChartReleaseScaleWithDefaults instantiates a new ChartReleaseScale object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartReleaseScaleWithDefaults() *ChartReleaseScale {
	this := ChartReleaseScale{}
	return &this
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *ChartReleaseScale) GetReleaseName() string {
	if o == nil || o.ReleaseName == nil {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseScale) GetReleaseNameOk() (*string, bool) {
	if o == nil || o.ReleaseName == nil {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *ChartReleaseScale) HasReleaseName() bool {
	if o != nil && o.ReleaseName != nil {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *ChartReleaseScale) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetScaleOptions returns the ScaleOptions field value if set, zero value otherwise.
func (o *ChartReleaseScale) GetScaleOptions() ChartReleaseScale1 {
	if o == nil || o.ScaleOptions == nil {
		var ret ChartReleaseScale1
		return ret
	}
	return *o.ScaleOptions
}

// GetScaleOptionsOk returns a tuple with the ScaleOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartReleaseScale) GetScaleOptionsOk() (*ChartReleaseScale1, bool) {
	if o == nil || o.ScaleOptions == nil {
		return nil, false
	}
	return o.ScaleOptions, true
}

// HasScaleOptions returns a boolean if a field has been set.
func (o *ChartReleaseScale) HasScaleOptions() bool {
	if o != nil && o.ScaleOptions != nil {
		return true
	}

	return false
}

// SetScaleOptions gets a reference to the given ChartReleaseScale1 and assigns it to the ScaleOptions field.
func (o *ChartReleaseScale) SetScaleOptions(v ChartReleaseScale1) {
	o.ScaleOptions = &v
}

func (o ChartReleaseScale) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReleaseName != nil {
		toSerialize["release_name"] = o.ReleaseName
	}
	if o.ScaleOptions != nil {
		toSerialize["scale_options"] = o.ScaleOptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChartReleaseScale) UnmarshalJSON(bytes []byte) (err error) {
	varChartReleaseScale := _ChartReleaseScale{}

	if err = json.Unmarshal(bytes, &varChartReleaseScale); err == nil {
		*o = ChartReleaseScale(varChartReleaseScale)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "release_name")
		delete(additionalProperties, "scale_options")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChartReleaseScale struct {
	value *ChartReleaseScale
	isSet bool
}

func (v NullableChartReleaseScale) Get() *ChartReleaseScale {
	return v.value
}

func (v *NullableChartReleaseScale) Set(val *ChartReleaseScale) {
	v.value = val
	v.isSet = true
}

func (v NullableChartReleaseScale) IsSet() bool {
	return v.isSet
}

func (v *NullableChartReleaseScale) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartReleaseScale(val *ChartReleaseScale) *NullableChartReleaseScale {
	return &NullableChartReleaseScale{value: val, isSet: true}
}

func (v NullableChartReleaseScale) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartReleaseScale) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

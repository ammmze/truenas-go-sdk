/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Lifetime struct for Lifetime
type Lifetime struct {
	Schedule      *Schedule5 `json:"schedule,omitempty"`
	LifetimeValue *int32     `json:"lifetime_value,omitempty"`
	LifetimeUnit  *string    `json:"lifetime_unit,omitempty"`
}

// NewLifetime instantiates a new Lifetime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifetime() *Lifetime {
	this := Lifetime{}
	return &this
}

// NewLifetimeWithDefaults instantiates a new Lifetime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifetimeWithDefaults() *Lifetime {
	this := Lifetime{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *Lifetime) GetSchedule() Schedule5 {
	if o == nil || o.Schedule == nil {
		var ret Schedule5
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lifetime) GetScheduleOk() (*Schedule5, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *Lifetime) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given Schedule5 and assigns it to the Schedule field.
func (o *Lifetime) SetSchedule(v Schedule5) {
	o.Schedule = &v
}

// GetLifetimeValue returns the LifetimeValue field value if set, zero value otherwise.
func (o *Lifetime) GetLifetimeValue() int32 {
	if o == nil || o.LifetimeValue == nil {
		var ret int32
		return ret
	}
	return *o.LifetimeValue
}

// GetLifetimeValueOk returns a tuple with the LifetimeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lifetime) GetLifetimeValueOk() (*int32, bool) {
	if o == nil || o.LifetimeValue == nil {
		return nil, false
	}
	return o.LifetimeValue, true
}

// HasLifetimeValue returns a boolean if a field has been set.
func (o *Lifetime) HasLifetimeValue() bool {
	if o != nil && o.LifetimeValue != nil {
		return true
	}

	return false
}

// SetLifetimeValue gets a reference to the given int32 and assigns it to the LifetimeValue field.
func (o *Lifetime) SetLifetimeValue(v int32) {
	o.LifetimeValue = &v
}

// GetLifetimeUnit returns the LifetimeUnit field value if set, zero value otherwise.
func (o *Lifetime) GetLifetimeUnit() string {
	if o == nil || o.LifetimeUnit == nil {
		var ret string
		return ret
	}
	return *o.LifetimeUnit
}

// GetLifetimeUnitOk returns a tuple with the LifetimeUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lifetime) GetLifetimeUnitOk() (*string, bool) {
	if o == nil || o.LifetimeUnit == nil {
		return nil, false
	}
	return o.LifetimeUnit, true
}

// HasLifetimeUnit returns a boolean if a field has been set.
func (o *Lifetime) HasLifetimeUnit() bool {
	if o != nil && o.LifetimeUnit != nil {
		return true
	}

	return false
}

// SetLifetimeUnit gets a reference to the given string and assigns it to the LifetimeUnit field.
func (o *Lifetime) SetLifetimeUnit(v string) {
	o.LifetimeUnit = &v
}

func (o Lifetime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.LifetimeValue != nil {
		toSerialize["lifetime_value"] = o.LifetimeValue
	}
	if o.LifetimeUnit != nil {
		toSerialize["lifetime_unit"] = o.LifetimeUnit
	}
	return json.Marshal(toSerialize)
}

type NullableLifetime struct {
	value *Lifetime
	isSet bool
}

func (v NullableLifetime) Get() *Lifetime {
	return v.value
}

func (v *NullableLifetime) Set(val *Lifetime) {
	v.value = val
	v.isSet = true
}

func (v NullableLifetime) IsSet() bool {
	return v.isSet
}

func (v *NullableLifetime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifetime(val *Lifetime) *NullableLifetime {
	return &NullableLifetime{value: val, isSet: true}
}

func (v NullableLifetime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifetime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

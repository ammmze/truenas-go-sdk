/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Perms1 struct for Perms1
type Perms1 struct {
	READ    *bool `json:"READ,omitempty"`
	WRITE   *bool `json:"WRITE,omitempty"`
	EXECUTE *bool `json:"EXECUTE,omitempty"`
}

// NewPerms1 instantiates a new Perms1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerms1() *Perms1 {
	this := Perms1{}
	var rEAD bool = false
	this.READ = &rEAD
	var wRITE bool = false
	this.WRITE = &wRITE
	var eXECUTE bool = false
	this.EXECUTE = &eXECUTE
	return &this
}

// NewPerms1WithDefaults instantiates a new Perms1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerms1WithDefaults() *Perms1 {
	this := Perms1{}
	var rEAD bool = false
	this.READ = &rEAD
	var wRITE bool = false
	this.WRITE = &wRITE
	var eXECUTE bool = false
	this.EXECUTE = &eXECUTE
	return &this
}

// GetREAD returns the READ field value if set, zero value otherwise.
func (o *Perms1) GetREAD() bool {
	if o == nil || o.READ == nil {
		var ret bool
		return ret
	}
	return *o.READ
}

// GetREADOk returns a tuple with the READ field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perms1) GetREADOk() (*bool, bool) {
	if o == nil || o.READ == nil {
		return nil, false
	}
	return o.READ, true
}

// HasREAD returns a boolean if a field has been set.
func (o *Perms1) HasREAD() bool {
	if o != nil && o.READ != nil {
		return true
	}

	return false
}

// SetREAD gets a reference to the given bool and assigns it to the READ field.
func (o *Perms1) SetREAD(v bool) {
	o.READ = &v
}

// GetWRITE returns the WRITE field value if set, zero value otherwise.
func (o *Perms1) GetWRITE() bool {
	if o == nil || o.WRITE == nil {
		var ret bool
		return ret
	}
	return *o.WRITE
}

// GetWRITEOk returns a tuple with the WRITE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perms1) GetWRITEOk() (*bool, bool) {
	if o == nil || o.WRITE == nil {
		return nil, false
	}
	return o.WRITE, true
}

// HasWRITE returns a boolean if a field has been set.
func (o *Perms1) HasWRITE() bool {
	if o != nil && o.WRITE != nil {
		return true
	}

	return false
}

// SetWRITE gets a reference to the given bool and assigns it to the WRITE field.
func (o *Perms1) SetWRITE(v bool) {
	o.WRITE = &v
}

// GetEXECUTE returns the EXECUTE field value if set, zero value otherwise.
func (o *Perms1) GetEXECUTE() bool {
	if o == nil || o.EXECUTE == nil {
		var ret bool
		return ret
	}
	return *o.EXECUTE
}

// GetEXECUTEOk returns a tuple with the EXECUTE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Perms1) GetEXECUTEOk() (*bool, bool) {
	if o == nil || o.EXECUTE == nil {
		return nil, false
	}
	return o.EXECUTE, true
}

// HasEXECUTE returns a boolean if a field has been set.
func (o *Perms1) HasEXECUTE() bool {
	if o != nil && o.EXECUTE != nil {
		return true
	}

	return false
}

// SetEXECUTE gets a reference to the given bool and assigns it to the EXECUTE field.
func (o *Perms1) SetEXECUTE(v bool) {
	o.EXECUTE = &v
}

func (o Perms1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.READ != nil {
		toSerialize["READ"] = o.READ
	}
	if o.WRITE != nil {
		toSerialize["WRITE"] = o.WRITE
	}
	if o.EXECUTE != nil {
		toSerialize["EXECUTE"] = o.EXECUTE
	}
	return json.Marshal(toSerialize)
}

type NullablePerms1 struct {
	value *Perms1
	isSet bool
}

func (v NullablePerms1) Get() *Perms1 {
	return v.value
}

func (v *NullablePerms1) Set(val *Perms1) {
	v.value = val
	v.isSet = true
}

func (v NullablePerms1) IsSet() bool {
	return v.isSet
}

func (v *NullablePerms1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerms1(val *Perms1) *NullablePerms1 {
	return &NullablePerms1{value: val, isSet: true}
}

func (v NullablePerms1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerms1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

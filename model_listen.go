/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Listen struct for Listen
type Listen struct {
	Ip   *string `json:"ip,omitempty"`
	Port *int32  `json:"port,omitempty"`
}

// NewListen instantiates a new Listen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListen() *Listen {
	this := Listen{}
	var port int32 = 3260
	this.Port = &port
	return &this
}

// NewListenWithDefaults instantiates a new Listen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListenWithDefaults() *Listen {
	this := Listen{}
	var port int32 = 3260
	this.Port = &port
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Listen) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listen) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Listen) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *Listen) SetIp(v string) {
	o.Ip = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Listen) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Listen) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Listen) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Listen) SetPort(v int32) {
	o.Port = &v
}

func (o Listen) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableListen struct {
	value *Listen
	isSet bool
}

func (v NullableListen) Get() *Listen {
	return v.value
}

func (v *NullableListen) Set(val *Listen) {
	v.value = val
	v.isSet = true
}

func (v NullableListen) IsSet() bool {
	return v.isSet
}

func (v *NullableListen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListen(val *Listen) *NullableListen {
	return &NullableListen{value: val, isSet: true}
}

func (v NullableListen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

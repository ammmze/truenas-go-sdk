/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// GlusterRebalanceApiService GlusterRebalanceApi service
type GlusterRebalanceApiService service

type GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest struct {
	ctx                        context.Context
	ApiService                 *GlusterRebalanceApiService
	glusterRebalanceFixLayout0 *GlusterRebalanceFixLayout0
}

func (r GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest) GlusterRebalanceFixLayout0(glusterRebalanceFixLayout0 GlusterRebalanceFixLayout0) GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest {
	r.glusterRebalanceFixLayout0 = &glusterRebalanceFixLayout0
	return r
}

func (r GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterRebalanceFixLayoutPostExecute(r)
}

/*
GlusterRebalanceFixLayoutPost Method for GlusterRebalanceFixLayoutPost

Start a fix-layout operation for a given
gluster volume.

`name` String representing the gluster volume.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest
*/
func (a *GlusterRebalanceApiService) GlusterRebalanceFixLayoutPost(ctx context.Context) GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest {
	return GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterRebalanceApiService) GlusterRebalanceFixLayoutPostExecute(r GlusterRebalanceApiGlusterRebalanceFixLayoutPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterRebalanceApiService.GlusterRebalanceFixLayoutPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/rebalance/fix_layout"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterRebalanceFixLayout0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterRebalanceApiGlusterRebalanceStartPostRequest struct {
	ctx                    context.Context
	ApiService             *GlusterRebalanceApiService
	glusterRebalanceStart0 *GlusterRebalanceStart0
}

func (r GlusterRebalanceApiGlusterRebalanceStartPostRequest) GlusterRebalanceStart0(glusterRebalanceStart0 GlusterRebalanceStart0) GlusterRebalanceApiGlusterRebalanceStartPostRequest {
	r.glusterRebalanceStart0 = &glusterRebalanceStart0
	return r
}

func (r GlusterRebalanceApiGlusterRebalanceStartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterRebalanceStartPostExecute(r)
}

/*
GlusterRebalanceStartPost Method for GlusterRebalanceStartPost

Start a rebalance operation for a given
gluster volume.

`name` String representing the gluster volume.
`force` Boolean, when True will forcefully
        start the rebalance operation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterRebalanceApiGlusterRebalanceStartPostRequest
*/
func (a *GlusterRebalanceApiService) GlusterRebalanceStartPost(ctx context.Context) GlusterRebalanceApiGlusterRebalanceStartPostRequest {
	return GlusterRebalanceApiGlusterRebalanceStartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterRebalanceApiService) GlusterRebalanceStartPostExecute(r GlusterRebalanceApiGlusterRebalanceStartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterRebalanceApiService.GlusterRebalanceStartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/rebalance/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterRebalanceStart0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterRebalanceApiGlusterRebalanceStatusPostRequest struct {
	ctx                     context.Context
	ApiService              *GlusterRebalanceApiService
	glusterRebalanceStatus0 *GlusterRebalanceStatus0
}

func (r GlusterRebalanceApiGlusterRebalanceStatusPostRequest) GlusterRebalanceStatus0(glusterRebalanceStatus0 GlusterRebalanceStatus0) GlusterRebalanceApiGlusterRebalanceStatusPostRequest {
	r.glusterRebalanceStatus0 = &glusterRebalanceStatus0
	return r
}

func (r GlusterRebalanceApiGlusterRebalanceStatusPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterRebalanceStatusPostExecute(r)
}

/*
GlusterRebalanceStatusPost Method for GlusterRebalanceStatusPost

Return the status of a rebalance operation
for a given gluster volume.

`name` String representing the gluster volume.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterRebalanceApiGlusterRebalanceStatusPostRequest
*/
func (a *GlusterRebalanceApiService) GlusterRebalanceStatusPost(ctx context.Context) GlusterRebalanceApiGlusterRebalanceStatusPostRequest {
	return GlusterRebalanceApiGlusterRebalanceStatusPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterRebalanceApiService) GlusterRebalanceStatusPostExecute(r GlusterRebalanceApiGlusterRebalanceStatusPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterRebalanceApiService.GlusterRebalanceStatusPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/rebalance/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterRebalanceStatus0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterRebalanceApiGlusterRebalanceStopPostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterRebalanceApiService
	glusterRebalanceStop0 *GlusterRebalanceStop0
}

func (r GlusterRebalanceApiGlusterRebalanceStopPostRequest) GlusterRebalanceStop0(glusterRebalanceStop0 GlusterRebalanceStop0) GlusterRebalanceApiGlusterRebalanceStopPostRequest {
	r.glusterRebalanceStop0 = &glusterRebalanceStop0
	return r
}

func (r GlusterRebalanceApiGlusterRebalanceStopPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterRebalanceStopPostExecute(r)
}

/*
GlusterRebalanceStopPost Method for GlusterRebalanceStopPost

Stop a rebalance operation for a given
gluster volume.

`name` String representing the gluster volume.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterRebalanceApiGlusterRebalanceStopPostRequest
*/
func (a *GlusterRebalanceApiService) GlusterRebalanceStopPost(ctx context.Context) GlusterRebalanceApiGlusterRebalanceStopPostRequest {
	return GlusterRebalanceApiGlusterRebalanceStopPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterRebalanceApiService) GlusterRebalanceStopPostExecute(r GlusterRebalanceApiGlusterRebalanceStopPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterRebalanceApiService.GlusterRebalanceStopPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/rebalance/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterRebalanceStop0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

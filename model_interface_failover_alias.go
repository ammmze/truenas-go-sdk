/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// InterfaceFailoverAlias struct for InterfaceFailoverAlias
type InterfaceFailoverAlias struct {
	Type    *string `json:"type,omitempty"`
	Address *string `json:"address,omitempty"`
}

// NewInterfaceFailoverAlias instantiates a new InterfaceFailoverAlias object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceFailoverAlias() *InterfaceFailoverAlias {
	this := InterfaceFailoverAlias{}
	var type_ string = "INET"
	this.Type = &type_
	return &this
}

// NewInterfaceFailoverAliasWithDefaults instantiates a new InterfaceFailoverAlias object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceFailoverAliasWithDefaults() *InterfaceFailoverAlias {
	this := InterfaceFailoverAlias{}
	var type_ string = "INET"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InterfaceFailoverAlias) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceFailoverAlias) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InterfaceFailoverAlias) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InterfaceFailoverAlias) SetType(v string) {
	o.Type = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *InterfaceFailoverAlias) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceFailoverAlias) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *InterfaceFailoverAlias) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *InterfaceFailoverAlias) SetAddress(v string) {
	o.Address = &v
}

func (o InterfaceFailoverAlias) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceFailoverAlias struct {
	value *InterfaceFailoverAlias
	isSet bool
}

func (v NullableInterfaceFailoverAlias) Get() *InterfaceFailoverAlias {
	return v.value
}

func (v *NullableInterfaceFailoverAlias) Set(val *InterfaceFailoverAlias) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceFailoverAlias) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceFailoverAlias) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceFailoverAlias(val *InterfaceFailoverAlias) *NullableInterfaceFailoverAlias {
	return &NullableInterfaceFailoverAlias{value: val, isSet: true}
}

func (v NullableInterfaceFailoverAlias) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceFailoverAlias) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

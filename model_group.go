/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Group struct for Group
type Group struct {
	Portal     *int32        `json:"portal,omitempty"`
	Initiator  NullableInt32 `json:"initiator,omitempty"`
	Authmethod *string       `json:"authmethod,omitempty"`
	Auth       NullableInt32 `json:"auth,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	var authmethod string = "NONE"
	this.Authmethod = &authmethod
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	var authmethod string = "NONE"
	this.Authmethod = &authmethod
	return &this
}

// GetPortal returns the Portal field value if set, zero value otherwise.
func (o *Group) GetPortal() int32 {
	if o == nil || o.Portal == nil {
		var ret int32
		return ret
	}
	return *o.Portal
}

// GetPortalOk returns a tuple with the Portal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPortalOk() (*int32, bool) {
	if o == nil || o.Portal == nil {
		return nil, false
	}
	return o.Portal, true
}

// HasPortal returns a boolean if a field has been set.
func (o *Group) HasPortal() bool {
	if o != nil && o.Portal != nil {
		return true
	}

	return false
}

// SetPortal gets a reference to the given int32 and assigns it to the Portal field.
func (o *Group) SetPortal(v int32) {
	o.Portal = &v
}

// GetInitiator returns the Initiator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetInitiator() int32 {
	if o == nil || o.Initiator.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Initiator.Get()
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetInitiatorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Initiator.Get(), o.Initiator.IsSet()
}

// HasInitiator returns a boolean if a field has been set.
func (o *Group) HasInitiator() bool {
	if o != nil && o.Initiator.IsSet() {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given NullableInt32 and assigns it to the Initiator field.
func (o *Group) SetInitiator(v int32) {
	o.Initiator.Set(&v)
}

// SetInitiatorNil sets the value for Initiator to be an explicit nil
func (o *Group) SetInitiatorNil() {
	o.Initiator.Set(nil)
}

// UnsetInitiator ensures that no value is present for Initiator, not even an explicit nil
func (o *Group) UnsetInitiator() {
	o.Initiator.Unset()
}

// GetAuthmethod returns the Authmethod field value if set, zero value otherwise.
func (o *Group) GetAuthmethod() string {
	if o == nil || o.Authmethod == nil {
		var ret string
		return ret
	}
	return *o.Authmethod
}

// GetAuthmethodOk returns a tuple with the Authmethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAuthmethodOk() (*string, bool) {
	if o == nil || o.Authmethod == nil {
		return nil, false
	}
	return o.Authmethod, true
}

// HasAuthmethod returns a boolean if a field has been set.
func (o *Group) HasAuthmethod() bool {
	if o != nil && o.Authmethod != nil {
		return true
	}

	return false
}

// SetAuthmethod gets a reference to the given string and assigns it to the Authmethod field.
func (o *Group) SetAuthmethod(v string) {
	o.Authmethod = &v
}

// GetAuth returns the Auth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetAuth() int32 {
	if o == nil || o.Auth.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Auth.Get()
}

// GetAuthOk returns a tuple with the Auth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetAuthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Auth.Get(), o.Auth.IsSet()
}

// HasAuth returns a boolean if a field has been set.
func (o *Group) HasAuth() bool {
	if o != nil && o.Auth.IsSet() {
		return true
	}

	return false
}

// SetAuth gets a reference to the given NullableInt32 and assigns it to the Auth field.
func (o *Group) SetAuth(v int32) {
	o.Auth.Set(&v)
}

// SetAuthNil sets the value for Auth to be an explicit nil
func (o *Group) SetAuthNil() {
	o.Auth.Set(nil)
}

// UnsetAuth ensures that no value is present for Auth, not even an explicit nil
func (o *Group) UnsetAuth() {
	o.Auth.Unset()
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Portal != nil {
		toSerialize["portal"] = o.Portal
	}
	if o.Initiator.IsSet() {
		toSerialize["initiator"] = o.Initiator.Get()
	}
	if o.Authmethod != nil {
		toSerialize["authmethod"] = o.Authmethod
	}
	if o.Auth.IsSet() {
		toSerialize["auth"] = o.Auth.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

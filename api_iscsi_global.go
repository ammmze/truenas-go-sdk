/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// IscsiGlobalApiService IscsiGlobalApi service
type IscsiGlobalApiService service

type IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest struct {
	ctx        context.Context
	ApiService *IscsiGlobalApiService
}

func (r IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.IscsiGlobalAluaEnabledGetExecute(r)
}

/*
IscsiGlobalAluaEnabledGet Method for IscsiGlobalAluaEnabledGet

Returns whether iSCSI ALUA is enabled or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest
*/
func (a *IscsiGlobalApiService) IscsiGlobalAluaEnabledGet(ctx context.Context) IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest {
	return IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IscsiGlobalApiService) IscsiGlobalAluaEnabledGetExecute(r IscsiGlobalApiIscsiGlobalAluaEnabledGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiGlobalApiService.IscsiGlobalAluaEnabledGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/global/alua_enabled"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IscsiGlobalApiIscsiGlobalClientCountGetRequest struct {
	ctx        context.Context
	ApiService *IscsiGlobalApiService
}

func (r IscsiGlobalApiIscsiGlobalClientCountGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.IscsiGlobalClientCountGetExecute(r)
}

/*
IscsiGlobalClientCountGet Method for IscsiGlobalClientCountGet

Return currently connected clients count.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IscsiGlobalApiIscsiGlobalClientCountGetRequest
*/
func (a *IscsiGlobalApiService) IscsiGlobalClientCountGet(ctx context.Context) IscsiGlobalApiIscsiGlobalClientCountGetRequest {
	return IscsiGlobalApiIscsiGlobalClientCountGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IscsiGlobalApiService) IscsiGlobalClientCountGetExecute(r IscsiGlobalApiIscsiGlobalClientCountGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiGlobalApiService.IscsiGlobalClientCountGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/global/client_count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IscsiGlobalApiIscsiGlobalGetRequest struct {
	ctx        context.Context
	ApiService *IscsiGlobalApiService
}

func (r IscsiGlobalApiIscsiGlobalGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.IscsiGlobalGetExecute(r)
}

/*
IscsiGlobalGet Method for IscsiGlobalGet



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IscsiGlobalApiIscsiGlobalGetRequest
*/
func (a *IscsiGlobalApiService) IscsiGlobalGet(ctx context.Context) IscsiGlobalApiIscsiGlobalGetRequest {
	return IscsiGlobalApiIscsiGlobalGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IscsiGlobalApiService) IscsiGlobalGetExecute(r IscsiGlobalApiIscsiGlobalGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiGlobalApiService.IscsiGlobalGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IscsiGlobalApiIscsiGlobalPutRequest struct {
	ctx                context.Context
	ApiService         *IscsiGlobalApiService
	iscsiGlobalUpdate0 *IscsiGlobalUpdate0
}

func (r IscsiGlobalApiIscsiGlobalPutRequest) IscsiGlobalUpdate0(iscsiGlobalUpdate0 IscsiGlobalUpdate0) IscsiGlobalApiIscsiGlobalPutRequest {
	r.iscsiGlobalUpdate0 = &iscsiGlobalUpdate0
	return r
}

func (r IscsiGlobalApiIscsiGlobalPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.IscsiGlobalPutExecute(r)
}

/*
IscsiGlobalPut Method for IscsiGlobalPut

`alua` is a no-op for FreeNAS.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IscsiGlobalApiIscsiGlobalPutRequest
*/
func (a *IscsiGlobalApiService) IscsiGlobalPut(ctx context.Context) IscsiGlobalApiIscsiGlobalPutRequest {
	return IscsiGlobalApiIscsiGlobalPutRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IscsiGlobalApiService) IscsiGlobalPutExecute(r IscsiGlobalApiIscsiGlobalPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiGlobalApiService.IscsiGlobalPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/global"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.iscsiGlobalUpdate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type IscsiGlobalApiIscsiGlobalSessionsGetRequest struct {
	ctx        context.Context
	ApiService *IscsiGlobalApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r IscsiGlobalApiIscsiGlobalSessionsGetRequest) Limit(limit int32) IscsiGlobalApiIscsiGlobalSessionsGetRequest {
	r.limit = &limit
	return r
}

func (r IscsiGlobalApiIscsiGlobalSessionsGetRequest) Offset(offset int32) IscsiGlobalApiIscsiGlobalSessionsGetRequest {
	r.offset = &offset
	return r
}

func (r IscsiGlobalApiIscsiGlobalSessionsGetRequest) Count(count bool) IscsiGlobalApiIscsiGlobalSessionsGetRequest {
	r.count = &count
	return r
}

func (r IscsiGlobalApiIscsiGlobalSessionsGetRequest) Sort(sort string) IscsiGlobalApiIscsiGlobalSessionsGetRequest {
	r.sort = &sort
	return r
}

func (r IscsiGlobalApiIscsiGlobalSessionsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.IscsiGlobalSessionsGetExecute(r)
}

/*
IscsiGlobalSessionsGet Method for IscsiGlobalSessionsGet

Get a list of currently running iSCSI sessions. This includes initiator and target names
and the unique connection IDs.

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return IscsiGlobalApiIscsiGlobalSessionsGetRequest
*/
func (a *IscsiGlobalApiService) IscsiGlobalSessionsGet(ctx context.Context) IscsiGlobalApiIscsiGlobalSessionsGetRequest {
	return IscsiGlobalApiIscsiGlobalSessionsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *IscsiGlobalApiService) IscsiGlobalSessionsGetExecute(r IscsiGlobalApiIscsiGlobalSessionsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IscsiGlobalApiService.IscsiGlobalSessionsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/iscsi/global/sessions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

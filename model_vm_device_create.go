/*
TrueNAS RESTful API

Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// VMDeviceCreate struct for VMDeviceCreate
type VMDeviceCreate struct {
	Dtype                string                 `json:"dtype"`
	Attributes           map[string]interface{} `json:"attributes,omitempty"`
	Order                *int32                 `json:"order,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMDeviceCreate VMDeviceCreate

// NewVMDeviceCreate instantiates a new VMDeviceCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMDeviceCreate(dtype string) *VMDeviceCreate {
	this := VMDeviceCreate{}
	this.Dtype = dtype
	return &this
}

// NewVMDeviceCreateWithDefaults instantiates a new VMDeviceCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMDeviceCreateWithDefaults() *VMDeviceCreate {
	this := VMDeviceCreate{}
	return &this
}

// GetDtype returns the Dtype field value
func (o *VMDeviceCreate) GetDtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dtype
}

// GetDtypeOk returns a tuple with the Dtype field value
// and a boolean to check if the value has been set.
func (o *VMDeviceCreate) GetDtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dtype, true
}

// SetDtype sets field value
func (o *VMDeviceCreate) SetDtype(v string) {
	o.Dtype = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *VMDeviceCreate) GetAttributes() map[string]interface{} {
	if o == nil || isNil(o.Attributes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDeviceCreate) GetAttributesOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Attributes) {
		return map[string]interface{}{}, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *VMDeviceCreate) HasAttributes() bool {
	if o != nil && !isNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *VMDeviceCreate) SetAttributes(v map[string]interface{}) {
	o.Attributes = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *VMDeviceCreate) GetOrder() int32 {
	if o == nil || isNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDeviceCreate) GetOrderOk() (*int32, bool) {
	if o == nil || isNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *VMDeviceCreate) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *VMDeviceCreate) SetOrder(v int32) {
	o.Order = &v
}

func (o VMDeviceCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dtype"] = o.Dtype
	}
	if !isNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VMDeviceCreate) UnmarshalJSON(bytes []byte) (err error) {
	varVMDeviceCreate := _VMDeviceCreate{}

	if err = json.Unmarshal(bytes, &varVMDeviceCreate); err == nil {
		*o = VMDeviceCreate(varVMDeviceCreate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "dtype")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "order")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMDeviceCreate struct {
	value *VMDeviceCreate
	isSet bool
}

func (v NullableVMDeviceCreate) Get() *VMDeviceCreate {
	return v.value
}

func (v *NullableVMDeviceCreate) Set(val *VMDeviceCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableVMDeviceCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableVMDeviceCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMDeviceCreate(val *VMDeviceCreate) *NullableVMDeviceCreate {
	return &NullableVMDeviceCreate{value: val, isSet: true}
}

func (v NullableVMDeviceCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMDeviceCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// AcmeDnsAuthenticatorApiService AcmeDnsAuthenticatorApi service
type AcmeDnsAuthenticatorApiService service

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorAuthenticatorSchemasGetExecute(r)
}

/*
AcmeDnsAuthenticatorAuthenticatorSchemasGet Method for AcmeDnsAuthenticatorAuthenticatorSchemasGet

Get the schemas for all DNS providers we support for ACME DNS Challenge and the respective attributes
required for connecting to them while validating a DNS Challenge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorAuthenticatorSchemasGet(ctx context.Context) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorAuthenticatorSchemasGetExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorAuthenticatorSchemasGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorAuthenticatorSchemasGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/authenticator_schemas"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) Limit(limit int32) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest {
	r.limit = &limit
	return r
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) Offset(offset int32) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest {
	r.offset = &offset
	return r
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) Count(count bool) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest {
	r.count = &count
	return r
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) Sort(sort string) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest {
	r.sort = &sort
	return r
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorGetExecute(r)
}

/*
AcmeDnsAuthenticatorGet Method for AcmeDnsAuthenticatorGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorGet(ctx context.Context) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorGetExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	id         int32
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdDeleteExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdDelete Method for AcmeDnsAuthenticatorIdIdDelete

Delete DNS Authenticator of `id`



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdDelete(ctx context.Context, id int32) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdDeleteExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	id         int32
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdGetExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdGet Method for AcmeDnsAuthenticatorIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdGet(ctx context.Context, id int32) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdGetExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest struct {
	ctx        context.Context
	ApiService *AcmeDnsAuthenticatorApiService
	id         int32
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorIdIdPutExecute(r)
}

/*
AcmeDnsAuthenticatorIdIdPut Method for AcmeDnsAuthenticatorIdIdPut

Update DNS Authenticator of `id`



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdPut(ctx context.Context, id int32) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorIdIdPutExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest struct {
	ctx                         context.Context
	ApiService                  *AcmeDnsAuthenticatorApiService
	acmeDnsAuthenticatorCreate0 *AcmeDnsAuthenticatorCreate0
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest) AcmeDnsAuthenticatorCreate0(acmeDnsAuthenticatorCreate0 AcmeDnsAuthenticatorCreate0) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest {
	r.acmeDnsAuthenticatorCreate0 = &acmeDnsAuthenticatorCreate0
	return r
}

func (r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AcmeDnsAuthenticatorPostExecute(r)
}

/*
AcmeDnsAuthenticatorPost Method for AcmeDnsAuthenticatorPost

Create a DNS Authenticator

Create a specific DNS Authenticator containing required authentication details for the said
provider to successfully connect with it




 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest
*/
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorPost(ctx context.Context) AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest {
	return AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AcmeDnsAuthenticatorApiService) AcmeDnsAuthenticatorPostExecute(r AcmeDnsAuthenticatorApiAcmeDnsAuthenticatorPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AcmeDnsAuthenticatorApiService.AcmeDnsAuthenticatorPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/acme/dns/authenticator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.acmeDnsAuthenticatorCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

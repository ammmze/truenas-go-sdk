/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// AuthTwofactorApiService AuthTwofactorApi service
type AuthTwofactorApiService service

type AuthTwofactorApiAuthTwofactorGetRequest struct {
	ctx        context.Context
	ApiService *AuthTwofactorApiService
}

func (r AuthTwofactorApiAuthTwofactorGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthTwofactorGetExecute(r)
}

/*
AuthTwofactorGet Method for AuthTwofactorGet



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthTwofactorApiAuthTwofactorGetRequest
*/
func (a *AuthTwofactorApiService) AuthTwofactorGet(ctx context.Context) AuthTwofactorApiAuthTwofactorGetRequest {
	return AuthTwofactorApiAuthTwofactorGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthTwofactorApiService) AuthTwofactorGetExecute(r AuthTwofactorApiAuthTwofactorGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthTwofactorApiService.AuthTwofactorGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/twofactor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest struct {
	ctx        context.Context
	ApiService *AuthTwofactorApiService
}

func (r AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthTwofactorProvisioningUriGetExecute(r)
}

/*
AuthTwofactorProvisioningUriGet Method for AuthTwofactorProvisioningUriGet

Returns the provisioning URI for the OTP. This can then be encoded in a QR Code and used to
provision an OTP app like Google Authenticator.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest
*/
func (a *AuthTwofactorApiService) AuthTwofactorProvisioningUriGet(ctx context.Context) AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest {
	return AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthTwofactorApiService) AuthTwofactorProvisioningUriGetExecute(r AuthTwofactorApiAuthTwofactorProvisioningUriGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthTwofactorApiService.AuthTwofactorProvisioningUriGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/twofactor/provisioning_uri"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AuthTwofactorApiAuthTwofactorPutRequest struct {
	ctx                  context.Context
	ApiService           *AuthTwofactorApiService
	authTwofactorUpdate0 *AuthTwofactorUpdate0
}

func (r AuthTwofactorApiAuthTwofactorPutRequest) AuthTwofactorUpdate0(authTwofactorUpdate0 AuthTwofactorUpdate0) AuthTwofactorApiAuthTwofactorPutRequest {
	r.authTwofactorUpdate0 = &authTwofactorUpdate0
	return r
}

func (r AuthTwofactorApiAuthTwofactorPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthTwofactorPutExecute(r)
}

/*
AuthTwofactorPut Method for AuthTwofactorPut

`otp_digits` represents number of allowed digits in the OTP.

`window` extends the validity to `window` many counter ticks before and after the current one.

`interval` is time duration in seconds specifying OTP expiration time from it's creation time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthTwofactorApiAuthTwofactorPutRequest
*/
func (a *AuthTwofactorApiService) AuthTwofactorPut(ctx context.Context) AuthTwofactorApiAuthTwofactorPutRequest {
	return AuthTwofactorApiAuthTwofactorPutRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthTwofactorApiService) AuthTwofactorPutExecute(r AuthTwofactorApiAuthTwofactorPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthTwofactorApiService.AuthTwofactorPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/twofactor"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authTwofactorUpdate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AuthTwofactorApiAuthTwofactorRenewSecretGetRequest struct {
	ctx        context.Context
	ApiService *AuthTwofactorApiService
}

func (r AuthTwofactorApiAuthTwofactorRenewSecretGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthTwofactorRenewSecretGetExecute(r)
}

/*
AuthTwofactorRenewSecretGet Method for AuthTwofactorRenewSecretGet

Generates a new secret for Two Factor Authentication. Returns boolean true on success.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthTwofactorApiAuthTwofactorRenewSecretGetRequest
*/
func (a *AuthTwofactorApiService) AuthTwofactorRenewSecretGet(ctx context.Context) AuthTwofactorApiAuthTwofactorRenewSecretGetRequest {
	return AuthTwofactorApiAuthTwofactorRenewSecretGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthTwofactorApiService) AuthTwofactorRenewSecretGetExecute(r AuthTwofactorApiAuthTwofactorRenewSecretGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthTwofactorApiService.AuthTwofactorRenewSecretGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/twofactor/renew_secret"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AuthTwofactorApiAuthTwofactorVerifyPostRequest struct {
	ctx        context.Context
	ApiService *AuthTwofactorApiService
	body       *string
}

func (r AuthTwofactorApiAuthTwofactorVerifyPostRequest) Body(body string) AuthTwofactorApiAuthTwofactorVerifyPostRequest {
	r.body = &body
	return r
}

func (r AuthTwofactorApiAuthTwofactorVerifyPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.AuthTwofactorVerifyPostExecute(r)
}

/*
AuthTwofactorVerifyPost Method for AuthTwofactorVerifyPost

Returns boolean true if provided `token` is successfully authenticated.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AuthTwofactorApiAuthTwofactorVerifyPostRequest
*/
func (a *AuthTwofactorApiService) AuthTwofactorVerifyPost(ctx context.Context) AuthTwofactorApiAuthTwofactorVerifyPostRequest {
	return AuthTwofactorApiAuthTwofactorVerifyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AuthTwofactorApiService) AuthTwofactorVerifyPostExecute(r AuthTwofactorApiAuthTwofactorVerifyPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthTwofactorApiService.AuthTwofactorVerifyPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/auth/twofactor/verify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

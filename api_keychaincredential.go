/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// KeychaincredentialApiService KeychaincredentialApi service
type KeychaincredentialApiService service

type KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
}

func (r KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialGenerateSshKeyPairGetExecute(r)
}

/*
KeychaincredentialGenerateSshKeyPairGet Method for KeychaincredentialGenerateSshKeyPairGet

Generate a public/private key pair

Generate a public/private key pair (useful for `SSH_KEY_PAIR` type)



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGet(ctx context.Context) KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest {
	return KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGetExecute(r KeychaincredentialApiKeychaincredentialGenerateSshKeyPairGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGenerateSshKeyPairGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/generate_ssh_key_pair"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r KeychaincredentialApiKeychaincredentialGetRequest) Limit(limit int32) KeychaincredentialApiKeychaincredentialGetRequest {
	r.limit = &limit
	return r
}

func (r KeychaincredentialApiKeychaincredentialGetRequest) Offset(offset int32) KeychaincredentialApiKeychaincredentialGetRequest {
	r.offset = &offset
	return r
}

func (r KeychaincredentialApiKeychaincredentialGetRequest) Count(count bool) KeychaincredentialApiKeychaincredentialGetRequest {
	r.count = &count
	return r
}

func (r KeychaincredentialApiKeychaincredentialGetRequest) Sort(sort string) KeychaincredentialApiKeychaincredentialGetRequest {
	r.sort = &sort
	return r
}

func (r KeychaincredentialApiKeychaincredentialGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialGetExecute(r)
}

/*
KeychaincredentialGet Method for KeychaincredentialGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialGet(ctx context.Context) KeychaincredentialApiKeychaincredentialGetRequest {
	return KeychaincredentialApiKeychaincredentialGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialGetExecute(r KeychaincredentialApiKeychaincredentialGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r KeychaincredentialApiKeychaincredentialIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdDeleteExecute(r)
}

/*
KeychaincredentialIdIdDelete Method for KeychaincredentialIdIdDelete

Delete Keychain Credential with specific `id`



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return KeychaincredentialApiKeychaincredentialIdIdDeleteRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDelete(ctx context.Context, id int32) KeychaincredentialApiKeychaincredentialIdIdDeleteRequest {
	return KeychaincredentialApiKeychaincredentialIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDeleteExecute(r KeychaincredentialApiKeychaincredentialIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialIdIdGetRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r KeychaincredentialApiKeychaincredentialIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdGetExecute(r)
}

/*
KeychaincredentialIdIdGet Method for KeychaincredentialIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return KeychaincredentialApiKeychaincredentialIdIdGetRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGet(ctx context.Context, id int32) KeychaincredentialApiKeychaincredentialIdIdGetRequest {
	return KeychaincredentialApiKeychaincredentialIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGetExecute(r KeychaincredentialApiKeychaincredentialIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialIdIdPutRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	id         int32
}

func (r KeychaincredentialApiKeychaincredentialIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialIdIdPutExecute(r)
}

/*
KeychaincredentialIdIdPut Method for KeychaincredentialIdIdPut

Update a Keychain Credential with specific `id`

Please note that you can't change `type`

Also you must specify full `attributes` value

See the documentation for `create` method for information on payload contents




 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return KeychaincredentialApiKeychaincredentialIdIdPutRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPut(ctx context.Context, id int32) KeychaincredentialApiKeychaincredentialIdIdPutRequest {
	return KeychaincredentialApiKeychaincredentialIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPutExecute(r KeychaincredentialApiKeychaincredentialIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialPostRequest struct {
	ctx                       context.Context
	ApiService                *KeychaincredentialApiService
	keychaincredentialCreate0 *KeychaincredentialCreate0
}

func (r KeychaincredentialApiKeychaincredentialPostRequest) KeychaincredentialCreate0(keychaincredentialCreate0 KeychaincredentialCreate0) KeychaincredentialApiKeychaincredentialPostRequest {
	r.keychaincredentialCreate0 = &keychaincredentialCreate0
	return r
}

func (r KeychaincredentialApiKeychaincredentialPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialPostExecute(r)
}

/*
KeychaincredentialPost Method for KeychaincredentialPost

Create a Keychain Credential

Create a Keychain Credential of any type.
Every Keychain Credential has a `name` which is used to distinguish it from others.
The following `type`s are supported:

 * `SSH_KEY_PAIR`
   Which `attributes` are:
   * `private_key`
   * `public_key` (which can be omitted and thus automatically derived from private key)
   At least one attribute is required.

 * `SSH_CREDENTIALS`
   Which `attributes` are:
   * `host`
   * `port` (default 22)
   * `username` (default root)
   * `private_key` (Keychain Credential ID)
   * `remote_host_key` (you can use `keychaincredential.remote_ssh_host_key_scan` do discover it)
   * `cipher`: one of `STANDARD`, `FAST`, or `DISABLED` (last requires special support from both SSH server and
     client)
   * `connect_timeout` (default 10)



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialPost(ctx context.Context) KeychaincredentialApiKeychaincredentialPostRequest {
	return KeychaincredentialApiKeychaincredentialPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialPostExecute(r KeychaincredentialApiKeychaincredentialPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest struct {
	ctx                                     context.Context
	ApiService                              *KeychaincredentialApiService
	keychaincredentialRemoteSshHostKeyScan0 *KeychaincredentialRemoteSshHostKeyScan0
}

func (r KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest) KeychaincredentialRemoteSshHostKeyScan0(keychaincredentialRemoteSshHostKeyScan0 KeychaincredentialRemoteSshHostKeyScan0) KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	r.keychaincredentialRemoteSshHostKeyScan0 = &keychaincredentialRemoteSshHostKeyScan0
	return r
}

func (r KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshHostKeyScanPostExecute(r)
}

/*
KeychaincredentialRemoteSshHostKeyScanPost Method for KeychaincredentialRemoteSshHostKeyScanPost

Discover a remote host key

Discover a remote host key (useful for `SSH_CREDENTIALS`)



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPost(ctx context.Context) KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	return KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPostExecute(r KeychaincredentialApiKeychaincredentialRemoteSshHostKeyScanPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshHostKeyScanPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_host_key_scan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshHostKeyScan0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest struct {
	ctx                                            context.Context
	ApiService                                     *KeychaincredentialApiService
	keychaincredentialRemoteSshSemiautomaticSetup0 *KeychaincredentialRemoteSshSemiautomaticSetup0
}

func (r KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) KeychaincredentialRemoteSshSemiautomaticSetup0(keychaincredentialRemoteSshSemiautomaticSetup0 KeychaincredentialRemoteSshSemiautomaticSetup0) KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	r.keychaincredentialRemoteSshSemiautomaticSetup0 = &keychaincredentialRemoteSshSemiautomaticSetup0
	return r
}

func (r KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r)
}

/*
KeychaincredentialRemoteSshSemiautomaticSetupPost Method for KeychaincredentialRemoteSshSemiautomaticSetupPost

Perform semi-automatic SSH connection setup with other FreeNAS machine

Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`
credential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and
temporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other
`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well.




 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPost(ctx context.Context) KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	return KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r KeychaincredentialApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshSemiautomaticSetupPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_semiautomatic_setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshSemiautomaticSetup0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest struct {
	ctx                                   context.Context
	ApiService                            *KeychaincredentialApiService
	keychaincredentialSetupSshConnection0 *KeychaincredentialSetupSshConnection0
}

func (r KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest) KeychaincredentialSetupSshConnection0(keychaincredentialSetupSshConnection0 KeychaincredentialSetupSshConnection0) KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest {
	r.keychaincredentialSetupSshConnection0 = &keychaincredentialSetupSshConnection0
	return r
}

func (r KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialSetupSshConnectionPostExecute(r)
}

/*
KeychaincredentialSetupSshConnectionPost Method for KeychaincredentialSetupSshConnectionPost

Creates a SSH Connection performing the following steps:

1) Generating SSH Key Pair if required
2) Setting up SSH Credentials based on `setup_type`

In case (2) fails, it will be ensured that SSH Key Pair generated ( if applicable ) in the process is
removed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialSetupSshConnectionPost(ctx context.Context) KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest {
	return KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialSetupSshConnectionPostExecute(r KeychaincredentialApiKeychaincredentialSetupSshConnectionPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialSetupSshConnectionPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/setup_ssh_connection"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialSetupSshConnection0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type KeychaincredentialApiKeychaincredentialUsedByPostRequest struct {
	ctx        context.Context
	ApiService *KeychaincredentialApiService
	body       *int32
}

func (r KeychaincredentialApiKeychaincredentialUsedByPostRequest) Body(body int32) KeychaincredentialApiKeychaincredentialUsedByPostRequest {
	r.body = &body
	return r
}

func (r KeychaincredentialApiKeychaincredentialUsedByPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.KeychaincredentialUsedByPostExecute(r)
}

/*
KeychaincredentialUsedByPost Method for KeychaincredentialUsedByPost

Returns list of objects that use this credential.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return KeychaincredentialApiKeychaincredentialUsedByPostRequest
*/
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPost(ctx context.Context) KeychaincredentialApiKeychaincredentialUsedByPostRequest {
	return KeychaincredentialApiKeychaincredentialUsedByPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPostExecute(r KeychaincredentialApiKeychaincredentialUsedByPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialUsedByPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/used_by"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

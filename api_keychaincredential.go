/*
 * TrueNAS RESTful API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// KeychaincredentialApiService KeychaincredentialApi service
type KeychaincredentialApiService service

type ApiKeychaincredentialGenerateSshKeyPairGetRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
}


func (r ApiKeychaincredentialGenerateSshKeyPairGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialGenerateSshKeyPairGetExecute(r)
}

/*
 * KeychaincredentialGenerateSshKeyPairGet Method for KeychaincredentialGenerateSshKeyPairGet
 * Generate a public/private key pair

Generate a public/private key pair (useful for `SSH_KEY_PAIR` type)


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialGenerateSshKeyPairGetRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGet(ctx _context.Context) ApiKeychaincredentialGenerateSshKeyPairGetRequest {
	return ApiKeychaincredentialGenerateSshKeyPairGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialGenerateSshKeyPairGetExecute(r ApiKeychaincredentialGenerateSshKeyPairGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGenerateSshKeyPairGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/generate_ssh_key_pair"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialGetRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	limit *int32
	offset *int32
	count *bool
	sort *string
}

func (r ApiKeychaincredentialGetRequest) Limit(limit int32) ApiKeychaincredentialGetRequest {
	r.limit = &limit
	return r
}
func (r ApiKeychaincredentialGetRequest) Offset(offset int32) ApiKeychaincredentialGetRequest {
	r.offset = &offset
	return r
}
func (r ApiKeychaincredentialGetRequest) Count(count bool) ApiKeychaincredentialGetRequest {
	r.count = &count
	return r
}
func (r ApiKeychaincredentialGetRequest) Sort(sort string) ApiKeychaincredentialGetRequest {
	r.sort = &sort
	return r
}

func (r ApiKeychaincredentialGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialGetExecute(r)
}

/*
 * KeychaincredentialGet Method for KeychaincredentialGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialGetRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialGet(ctx _context.Context) ApiKeychaincredentialGetRequest {
	return ApiKeychaincredentialGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialGetExecute(r ApiKeychaincredentialGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdDeleteRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	id int32
	keychaincredentialDelete1 *KeychaincredentialDelete1
}

func (r ApiKeychaincredentialIdIdDeleteRequest) KeychaincredentialDelete1(keychaincredentialDelete1 KeychaincredentialDelete1) ApiKeychaincredentialIdIdDeleteRequest {
	r.keychaincredentialDelete1 = &keychaincredentialDelete1
	return r
}

func (r ApiKeychaincredentialIdIdDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialIdIdDeleteExecute(r)
}

/*
 * KeychaincredentialIdIdDelete Method for KeychaincredentialIdIdDelete
 * Delete Keychain Credential with specific `id`


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiKeychaincredentialIdIdDeleteRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDelete(ctx _context.Context, id int32) ApiKeychaincredentialIdIdDeleteRequest {
	return ApiKeychaincredentialIdIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdDeleteExecute(r ApiKeychaincredentialIdIdDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialDelete1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdGetRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	id []interface{}
	limit *int32
	offset *int32
	count *bool
	sort *string
}

func (r ApiKeychaincredentialIdIdGetRequest) Limit(limit int32) ApiKeychaincredentialIdIdGetRequest {
	r.limit = &limit
	return r
}
func (r ApiKeychaincredentialIdIdGetRequest) Offset(offset int32) ApiKeychaincredentialIdIdGetRequest {
	r.offset = &offset
	return r
}
func (r ApiKeychaincredentialIdIdGetRequest) Count(count bool) ApiKeychaincredentialIdIdGetRequest {
	r.count = &count
	return r
}
func (r ApiKeychaincredentialIdIdGetRequest) Sort(sort string) ApiKeychaincredentialIdIdGetRequest {
	r.sort = &sort
	return r
}

func (r ApiKeychaincredentialIdIdGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialIdIdGetExecute(r)
}

/*
 * KeychaincredentialIdIdGet Method for KeychaincredentialIdIdGet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiKeychaincredentialIdIdGetRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGet(ctx _context.Context, id []interface{}) ApiKeychaincredentialIdIdGetRequest {
	return ApiKeychaincredentialIdIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdGetExecute(r ApiKeychaincredentialIdIdGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "csv")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialIdIdPutRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	id int32
	keychaincredentialUpdate1 *KeychaincredentialUpdate1
}

func (r ApiKeychaincredentialIdIdPutRequest) KeychaincredentialUpdate1(keychaincredentialUpdate1 KeychaincredentialUpdate1) ApiKeychaincredentialIdIdPutRequest {
	r.keychaincredentialUpdate1 = &keychaincredentialUpdate1
	return r
}

func (r ApiKeychaincredentialIdIdPutRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialIdIdPutExecute(r)
}

/*
 * KeychaincredentialIdIdPut Method for KeychaincredentialIdIdPut
 * Update a Keychain Credential with specific `id`

Please note that you can't change `type`

Also you must specify full `attributes` value

See the documentation for `create` method for information on payload contents


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiKeychaincredentialIdIdPutRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPut(ctx _context.Context, id int32) ApiKeychaincredentialIdIdPutRequest {
	return ApiKeychaincredentialIdIdPutRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialIdIdPutExecute(r ApiKeychaincredentialIdIdPutRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialIdIdPut")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialUpdate1
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialPostRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	keychaincredentialCreate0 *KeychaincredentialCreate0
}

func (r ApiKeychaincredentialPostRequest) KeychaincredentialCreate0(keychaincredentialCreate0 KeychaincredentialCreate0) ApiKeychaincredentialPostRequest {
	r.keychaincredentialCreate0 = &keychaincredentialCreate0
	return r
}

func (r ApiKeychaincredentialPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialPostExecute(r)
}

/*
 * KeychaincredentialPost Method for KeychaincredentialPost
 * Create a Keychain Credential

Create a Keychain Credential of any type.
Every Keychain Credential has a `name` which is used to distinguish it from others.
The following `type`s are supported:
 * `SSH_KEY_PAIR`
   Which `attributes` are:
   * `private_key`
   * `public_key` (which can be omitted and thus automatically derived from private key)
   At least one attribute is required.

 * `SSH_CREDENTIALS`
   Which `attributes` are:
   * `host`
   * `port` (default 22)
   * `username` (default root)
   * `private_key` (Keychain Credential ID)
   * `remote_host_key` (you can use `keychaincredential.remote_ssh_host_key_scan` do discover it)
   * `cipher`: one of `STANDARD`, `FAST`, or `DISABLED` (last requires special support from both SSH server and
     client)
   * `connect_timeout` (default 10)


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialPostRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialPost(ctx _context.Context) ApiKeychaincredentialPostRequest {
	return ApiKeychaincredentialPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialPostExecute(r ApiKeychaincredentialPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialRemoteSshHostKeyScanPostRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	keychaincredentialRemoteSshHostKeyScan0 *KeychaincredentialRemoteSshHostKeyScan0
}

func (r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) KeychaincredentialRemoteSshHostKeyScan0(keychaincredentialRemoteSshHostKeyScan0 KeychaincredentialRemoteSshHostKeyScan0) ApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	r.keychaincredentialRemoteSshHostKeyScan0 = &keychaincredentialRemoteSshHostKeyScan0
	return r
}

func (r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshHostKeyScanPostExecute(r)
}

/*
 * KeychaincredentialRemoteSshHostKeyScanPost Method for KeychaincredentialRemoteSshHostKeyScanPost
 * Discover a remote host key

Discover a remote host key (useful for `SSH_CREDENTIALS`)


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialRemoteSshHostKeyScanPostRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPost(ctx _context.Context) ApiKeychaincredentialRemoteSshHostKeyScanPostRequest {
	return ApiKeychaincredentialRemoteSshHostKeyScanPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshHostKeyScanPostExecute(r ApiKeychaincredentialRemoteSshHostKeyScanPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshHostKeyScanPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_host_key_scan"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshHostKeyScan0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	keychaincredentialRemoteSshSemiautomaticSetup0 *KeychaincredentialRemoteSshSemiautomaticSetup0
}

func (r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) KeychaincredentialRemoteSshSemiautomaticSetup0(keychaincredentialRemoteSshSemiautomaticSetup0 KeychaincredentialRemoteSshSemiautomaticSetup0) ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	r.keychaincredentialRemoteSshSemiautomaticSetup0 = &keychaincredentialRemoteSshSemiautomaticSetup0
	return r
}

func (r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r)
}

/*
 * KeychaincredentialRemoteSshSemiautomaticSetupPost Method for KeychaincredentialRemoteSshSemiautomaticSetupPost
 * Perform semi-automatic SSH connection setup with other FreeNAS machine

Perform semi-automatic SSH connection setup with other FreeNAS machine. It creates a `SSH_CREDENTIALS`
credential with specified `name` that can be used to connect to FreeNAS machine with specified `url` and
temporary auth `token`. Other FreeNAS machine adds `private_key` to allowed `username`'s private keys. Other
`SSH_CREDENTIALS` attributes such as `cipher` and `connect_timeout` can be specified as well.


 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPost(ctx _context.Context) ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest {
	return ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialRemoteSshSemiautomaticSetupPostExecute(r ApiKeychaincredentialRemoteSshSemiautomaticSetupPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialRemoteSshSemiautomaticSetupPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/remote_ssh_semiautomatic_setup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.keychaincredentialRemoteSshSemiautomaticSetup0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiKeychaincredentialUsedByPostRequest struct {
	ctx _context.Context
	ApiService *KeychaincredentialApiService
	body *int32
}

func (r ApiKeychaincredentialUsedByPostRequest) Body(body int32) ApiKeychaincredentialUsedByPostRequest {
	r.body = &body
	return r
}

func (r ApiKeychaincredentialUsedByPostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.KeychaincredentialUsedByPostExecute(r)
}

/*
 * KeychaincredentialUsedByPost Method for KeychaincredentialUsedByPost
 * Returns list of objects that use this credential.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiKeychaincredentialUsedByPostRequest
 */
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPost(ctx _context.Context) ApiKeychaincredentialUsedByPostRequest {
	return ApiKeychaincredentialUsedByPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *KeychaincredentialApiService) KeychaincredentialUsedByPostExecute(r ApiKeychaincredentialUsedByPostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KeychaincredentialApiService.KeychaincredentialUsedByPost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/keychaincredential/used_by"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

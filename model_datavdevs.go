/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Datavdevs struct for Datavdevs
type Datavdevs struct {
	Type  *string  `json:"type,omitempty"`
	Disks []string `json:"disks,omitempty"`
}

// NewDatavdevs instantiates a new Datavdevs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatavdevs() *Datavdevs {
	this := Datavdevs{}
	return &this
}

// NewDatavdevsWithDefaults instantiates a new Datavdevs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatavdevsWithDefaults() *Datavdevs {
	this := Datavdevs{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Datavdevs) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datavdevs) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Datavdevs) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Datavdevs) SetType(v string) {
	o.Type = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *Datavdevs) GetDisks() []string {
	if o == nil || o.Disks == nil {
		var ret []string
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Datavdevs) GetDisksOk() ([]string, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *Datavdevs) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []string and assigns it to the Disks field.
func (o *Datavdevs) SetDisks(v []string) {
	o.Disks = v
}

func (o Datavdevs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableDatavdevs struct {
	value *Datavdevs
	isSet bool
}

func (v NullableDatavdevs) Get() *Datavdevs {
	return v.value
}

func (v *NullableDatavdevs) Set(val *Datavdevs) {
	v.value = val
	v.isSet = true
}

func (v NullableDatavdevs) IsSet() bool {
	return v.isSet
}

func (v *NullableDatavdevs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatavdevs(val *Datavdevs) *NullableDatavdevs {
	return &NullableDatavdevs{value: val, isSet: true}
}

func (v NullableDatavdevs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatavdevs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

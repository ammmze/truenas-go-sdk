/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// GlusterLocaleventsApiService GlusterLocaleventsApi service
type GlusterLocaleventsApiService service

type GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest struct {
	ctx                             context.Context
	ApiService                      *GlusterLocaleventsApiService
	glusterLocaleventsAddJwtSecret0 *GlusterLocaleventsAddJwtSecret0
}

func (r GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest) GlusterLocaleventsAddJwtSecret0(glusterLocaleventsAddJwtSecret0 GlusterLocaleventsAddJwtSecret0) GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest {
	r.glusterLocaleventsAddJwtSecret0 = &glusterLocaleventsAddJwtSecret0
	return r
}

func (r GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterLocaleventsAddJwtSecretPostExecute(r)
}

/*
GlusterLocaleventsAddJwtSecretPost Method for GlusterLocaleventsAddJwtSecretPost

Add a `secret` key used to encode/decode
JWT messages for sending/receiving gluster
events.

`secret` String representing the key to be used
            to encode/decode JWT messages
`force` Boolean if set to True, will forcefully
            wipe any existing jwt key for this
            peer. Note, if forcefully adding a
            new key, the other peers in the TSP
            will also need to be sent this key.

Note: this secret is only used for messages
that are destined for the api endpoint at
http://*:6000/_clusterevents for each peer
in the trusted storage pool.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest
*/
func (a *GlusterLocaleventsApiService) GlusterLocaleventsAddJwtSecretPost(ctx context.Context) GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest {
	return GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterLocaleventsApiService) GlusterLocaleventsAddJwtSecretPostExecute(r GlusterLocaleventsApiGlusterLocaleventsAddJwtSecretPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterLocaleventsApiService.GlusterLocaleventsAddJwtSecretPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/localevents/add_jwt_secret"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterLocaleventsAddJwtSecret0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest struct {
	ctx        context.Context
	ApiService *GlusterLocaleventsApiService
}

func (r GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterLocaleventsGetSetJwtSecretGetExecute(r)
}

/*
GlusterLocaleventsGetSetJwtSecretGet Method for GlusterLocaleventsGetSetJwtSecretGet

Return the secret key used to encode/decode
JWT messages for sending/receiving gluster
events.

Note: this secret is only used for messages
that are destined for the api endpoint at
http://*:6000/_clusterevents for each peer
in the trusted storage pool.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest
*/
func (a *GlusterLocaleventsApiService) GlusterLocaleventsGetSetJwtSecretGet(ctx context.Context) GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest {
	return GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterLocaleventsApiService) GlusterLocaleventsGetSetJwtSecretGetExecute(r GlusterLocaleventsApiGlusterLocaleventsGetSetJwtSecretGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterLocaleventsApiService.GlusterLocaleventsGetSetJwtSecretGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/localevents/get_set_jwt_secret"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// GlusterVolumeCreate0 struct for GlusterVolumeCreate0
type GlusterVolumeCreate0 struct {
	// `name` String representing name to be given to the volume
	Name *string `json:"name,omitempty"`
	// `bricks` List representing the brick paths     `peer_name` String representing IP or DNS name of the peer     `peer_path` String representing the full path of the brick
	Bricks []Brick `json:"bricks,omitempty"`
	// `replica` Integer representing number of replica bricks
	Replica *int32 `json:"replica,omitempty"`
	// `arbiter` Integer representing number of arbiter bricks
	Arbiter *int32 `json:"arbiter,omitempty"`
	// `disperse` Integer representing number of disperse bricks
	Disperse *int32 `json:"disperse,omitempty"`
	// `disperse_data` Integer representing number of disperse data bricks
	DisperseData *int32 `json:"disperse_data,omitempty"`
	// `redundancy` Integer representing number of redundancy bricks
	Redundancy *int32 `json:"redundancy,omitempty"`
	Force      *bool  `json:"force,omitempty"`
}

// NewGlusterVolumeCreate0 instantiates a new GlusterVolumeCreate0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlusterVolumeCreate0() *GlusterVolumeCreate0 {
	this := GlusterVolumeCreate0{}
	return &this
}

// NewGlusterVolumeCreate0WithDefaults instantiates a new GlusterVolumeCreate0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlusterVolumeCreate0WithDefaults() *GlusterVolumeCreate0 {
	this := GlusterVolumeCreate0{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GlusterVolumeCreate0) SetName(v string) {
	o.Name = &v
}

// GetBricks returns the Bricks field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetBricks() []Brick {
	if o == nil || o.Bricks == nil {
		var ret []Brick
		return ret
	}
	return o.Bricks
}

// GetBricksOk returns a tuple with the Bricks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetBricksOk() ([]Brick, bool) {
	if o == nil || o.Bricks == nil {
		return nil, false
	}
	return o.Bricks, true
}

// HasBricks returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasBricks() bool {
	if o != nil && o.Bricks != nil {
		return true
	}

	return false
}

// SetBricks gets a reference to the given []Brick and assigns it to the Bricks field.
func (o *GlusterVolumeCreate0) SetBricks(v []Brick) {
	o.Bricks = v
}

// GetReplica returns the Replica field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetReplica() int32 {
	if o == nil || o.Replica == nil {
		var ret int32
		return ret
	}
	return *o.Replica
}

// GetReplicaOk returns a tuple with the Replica field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetReplicaOk() (*int32, bool) {
	if o == nil || o.Replica == nil {
		return nil, false
	}
	return o.Replica, true
}

// HasReplica returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasReplica() bool {
	if o != nil && o.Replica != nil {
		return true
	}

	return false
}

// SetReplica gets a reference to the given int32 and assigns it to the Replica field.
func (o *GlusterVolumeCreate0) SetReplica(v int32) {
	o.Replica = &v
}

// GetArbiter returns the Arbiter field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetArbiter() int32 {
	if o == nil || o.Arbiter == nil {
		var ret int32
		return ret
	}
	return *o.Arbiter
}

// GetArbiterOk returns a tuple with the Arbiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetArbiterOk() (*int32, bool) {
	if o == nil || o.Arbiter == nil {
		return nil, false
	}
	return o.Arbiter, true
}

// HasArbiter returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasArbiter() bool {
	if o != nil && o.Arbiter != nil {
		return true
	}

	return false
}

// SetArbiter gets a reference to the given int32 and assigns it to the Arbiter field.
func (o *GlusterVolumeCreate0) SetArbiter(v int32) {
	o.Arbiter = &v
}

// GetDisperse returns the Disperse field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetDisperse() int32 {
	if o == nil || o.Disperse == nil {
		var ret int32
		return ret
	}
	return *o.Disperse
}

// GetDisperseOk returns a tuple with the Disperse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetDisperseOk() (*int32, bool) {
	if o == nil || o.Disperse == nil {
		return nil, false
	}
	return o.Disperse, true
}

// HasDisperse returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasDisperse() bool {
	if o != nil && o.Disperse != nil {
		return true
	}

	return false
}

// SetDisperse gets a reference to the given int32 and assigns it to the Disperse field.
func (o *GlusterVolumeCreate0) SetDisperse(v int32) {
	o.Disperse = &v
}

// GetDisperseData returns the DisperseData field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetDisperseData() int32 {
	if o == nil || o.DisperseData == nil {
		var ret int32
		return ret
	}
	return *o.DisperseData
}

// GetDisperseDataOk returns a tuple with the DisperseData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetDisperseDataOk() (*int32, bool) {
	if o == nil || o.DisperseData == nil {
		return nil, false
	}
	return o.DisperseData, true
}

// HasDisperseData returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasDisperseData() bool {
	if o != nil && o.DisperseData != nil {
		return true
	}

	return false
}

// SetDisperseData gets a reference to the given int32 and assigns it to the DisperseData field.
func (o *GlusterVolumeCreate0) SetDisperseData(v int32) {
	o.DisperseData = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetRedundancy() int32 {
	if o == nil || o.Redundancy == nil {
		var ret int32
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetRedundancyOk() (*int32, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given int32 and assigns it to the Redundancy field.
func (o *GlusterVolumeCreate0) SetRedundancy(v int32) {
	o.Redundancy = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *GlusterVolumeCreate0) GetForce() bool {
	if o == nil || o.Force == nil {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlusterVolumeCreate0) GetForceOk() (*bool, bool) {
	if o == nil || o.Force == nil {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *GlusterVolumeCreate0) HasForce() bool {
	if o != nil && o.Force != nil {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *GlusterVolumeCreate0) SetForce(v bool) {
	o.Force = &v
}

func (o GlusterVolumeCreate0) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Bricks != nil {
		toSerialize["bricks"] = o.Bricks
	}
	if o.Replica != nil {
		toSerialize["replica"] = o.Replica
	}
	if o.Arbiter != nil {
		toSerialize["arbiter"] = o.Arbiter
	}
	if o.Disperse != nil {
		toSerialize["disperse"] = o.Disperse
	}
	if o.DisperseData != nil {
		toSerialize["disperse_data"] = o.DisperseData
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if o.Force != nil {
		toSerialize["force"] = o.Force
	}
	return json.Marshal(toSerialize)
}

type NullableGlusterVolumeCreate0 struct {
	value *GlusterVolumeCreate0
	isSet bool
}

func (v NullableGlusterVolumeCreate0) Get() *GlusterVolumeCreate0 {
	return v.value
}

func (v *NullableGlusterVolumeCreate0) Set(val *GlusterVolumeCreate0) {
	v.value = val
	v.isSet = true
}

func (v NullableGlusterVolumeCreate0) IsSet() bool {
	return v.isSet
}

func (v *NullableGlusterVolumeCreate0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlusterVolumeCreate0(val *GlusterVolumeCreate0) *NullableGlusterVolumeCreate0 {
	return &NullableGlusterVolumeCreate0{value: val, isSet: true}
}

func (v NullableGlusterVolumeCreate0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlusterVolumeCreate0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PoolSnapshottaskApiService PoolSnapshottaskApi service
type PoolSnapshottaskApiService service

type PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest struct {
	ctx                            context.Context
	ApiService                     *PoolSnapshottaskApiService
	poolSnapshottaskForeseenCount0 *PoolSnapshottaskForeseenCount0
}

func (r PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest) PoolSnapshottaskForeseenCount0(poolSnapshottaskForeseenCount0 PoolSnapshottaskForeseenCount0) PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest {
	r.poolSnapshottaskForeseenCount0 = &poolSnapshottaskForeseenCount0
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskForeseenCountPostExecute(r)
}

/*
PoolSnapshottaskForeseenCountPost Method for PoolSnapshottaskForeseenCountPost

Returns a number of snapshots (per-dataset) being retained if a periodic snapshot task with specific parameters
is created.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskForeseenCountPost(ctx context.Context) PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest {
	return PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskForeseenCountPostExecute(r PoolSnapshottaskApiPoolSnapshottaskForeseenCountPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskForeseenCountPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/foreseen_count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.poolSnapshottaskForeseenCount0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskGetRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r PoolSnapshottaskApiPoolSnapshottaskGetRequest) Limit(limit int32) PoolSnapshottaskApiPoolSnapshottaskGetRequest {
	r.limit = &limit
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskGetRequest) Offset(offset int32) PoolSnapshottaskApiPoolSnapshottaskGetRequest {
	r.offset = &offset
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskGetRequest) Count(count bool) PoolSnapshottaskApiPoolSnapshottaskGetRequest {
	r.count = &count
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskGetRequest) Sort(sort string) PoolSnapshottaskApiPoolSnapshottaskGetRequest {
	r.sort = &sort
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskGetExecute(r)
}

/*
PoolSnapshottaskGet Method for PoolSnapshottaskGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolSnapshottaskApiPoolSnapshottaskGetRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskGet(ctx context.Context) PoolSnapshottaskApiPoolSnapshottaskGetRequest {
	return PoolSnapshottaskApiPoolSnapshottaskGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskGetExecute(r PoolSnapshottaskApiPoolSnapshottaskGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdDeleteExecute(r)
}

/*
PoolSnapshottaskIdIdDelete Method for PoolSnapshottaskIdIdDelete

Delete a Periodic Snapshot Task with specific `id`



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdDelete(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdDeleteExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdDeleteWillChangeRetentionForPostExecute(r)
}

/*
PoolSnapshottaskIdIdDeleteWillChangeRetentionForPost Method for PoolSnapshottaskIdIdDeleteWillChangeRetentionForPost

Returns a list of snapshots which will change the retention if periodic snapshot task `id` is deleted.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdDeleteWillChangeRetentionForPost(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdDeleteWillChangeRetentionForPostExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdDeleteWillChangeRetentionForPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdDeleteWillChangeRetentionForPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}/delete_will_change_retention_for"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdGetExecute(r)
}

/*
PoolSnapshottaskIdIdGet Method for PoolSnapshottaskIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdGet(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdGetExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdPutExecute(r)
}

/*
PoolSnapshottaskIdIdPut Method for PoolSnapshottaskIdIdPut

Update a Periodic Snapshot Task with specific `id`

See the documentation for `create` method for information on payload contents




 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdPut(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdPutExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdRunPostExecute(r)
}

/*
PoolSnapshottaskIdIdRunPost Method for PoolSnapshottaskIdIdRunPost

Execute a Periodic Snapshot Task of `id`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdRunPost(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdRunPostExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdRunPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdRunPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}/run"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
	id         int32
}

func (r PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskIdIdUpdateWillChangeRetentionForPostExecute(r)
}

/*
PoolSnapshottaskIdIdUpdateWillChangeRetentionForPost Method for PoolSnapshottaskIdIdUpdateWillChangeRetentionForPost

Returns a list of snapshots which will change the retention if periodic snapshot task `id` is updated
with `data`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdUpdateWillChangeRetentionForPost(ctx context.Context, id int32) PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest {
	return PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskIdIdUpdateWillChangeRetentionForPostExecute(r PoolSnapshottaskApiPoolSnapshottaskIdIdUpdateWillChangeRetentionForPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskIdIdUpdateWillChangeRetentionForPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/id/{id}/update_will_change_retention_for"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
}

func (r PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskMaxCountGetExecute(r)
}

/*
PoolSnapshottaskMaxCountGet Method for PoolSnapshottaskMaxCountGet

Returns a maximum amount of snapshots (per-dataset) the system can sustain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskMaxCountGet(ctx context.Context) PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest {
	return PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskMaxCountGetExecute(r PoolSnapshottaskApiPoolSnapshottaskMaxCountGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskMaxCountGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/max_count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest struct {
	ctx        context.Context
	ApiService *PoolSnapshottaskApiService
}

func (r PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskMaxTotalCountGetExecute(r)
}

/*
PoolSnapshottaskMaxTotalCountGet Method for PoolSnapshottaskMaxTotalCountGet

Returns a maximum amount of snapshots (total) the system can sustain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskMaxTotalCountGet(ctx context.Context) PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest {
	return PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskMaxTotalCountGetExecute(r PoolSnapshottaskApiPoolSnapshottaskMaxTotalCountGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskMaxTotalCountGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask/max_total_count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PoolSnapshottaskApiPoolSnapshottaskPostRequest struct {
	ctx                     context.Context
	ApiService              *PoolSnapshottaskApiService
	poolSnapshottaskCreate0 *PoolSnapshottaskCreate0
}

func (r PoolSnapshottaskApiPoolSnapshottaskPostRequest) PoolSnapshottaskCreate0(poolSnapshottaskCreate0 PoolSnapshottaskCreate0) PoolSnapshottaskApiPoolSnapshottaskPostRequest {
	r.poolSnapshottaskCreate0 = &poolSnapshottaskCreate0
	return r
}

func (r PoolSnapshottaskApiPoolSnapshottaskPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.PoolSnapshottaskPostExecute(r)
}

/*
PoolSnapshottaskPost Method for PoolSnapshottaskPost

Create a Periodic Snapshot Task

Create a Periodic Snapshot Task that will take snapshots of specified `dataset` at specified `schedule`.
Recursive snapshots can be created if `recursive` flag is enabled. You can `exclude` specific child datasets
or zvols from the snapshot.
Snapshots will be automatically destroyed after a certain amount of time, specified by
`lifetime_value` and `lifetime_unit`.
If multiple periodic tasks create snapshots at the same time (for example hourly and daily at 00:00) the snapshot
will be kept until the last of these tasks reaches its expiry time.
Snapshots will be named according to `naming_schema` which is a `strftime`-like template for snapshot name
and must contain `%Y`, `%m`, `%d`, `%H` and `%M`.




 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PoolSnapshottaskApiPoolSnapshottaskPostRequest
*/
func (a *PoolSnapshottaskApiService) PoolSnapshottaskPost(ctx context.Context) PoolSnapshottaskApiPoolSnapshottaskPostRequest {
	return PoolSnapshottaskApiPoolSnapshottaskPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *PoolSnapshottaskApiService) PoolSnapshottaskPostExecute(r PoolSnapshottaskApiPoolSnapshottaskPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PoolSnapshottaskApiService.PoolSnapshottaskPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/pool/snapshottask"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.poolSnapshottaskCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

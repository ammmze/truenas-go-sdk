/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// CtdbPublicIpsApiService CtdbPublicIpsApi service
type CtdbPublicIpsApiService service

type CtdbPublicIpsApiCtdbPublicIpsGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r CtdbPublicIpsApiCtdbPublicIpsGetRequest) Limit(limit int32) CtdbPublicIpsApiCtdbPublicIpsGetRequest {
	r.limit = &limit
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsGetRequest) Offset(offset int32) CtdbPublicIpsApiCtdbPublicIpsGetRequest {
	r.offset = &offset
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsGetRequest) Count(count bool) CtdbPublicIpsApiCtdbPublicIpsGetRequest {
	r.count = &count
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsGetRequest) Sort(sort string) CtdbPublicIpsApiCtdbPublicIpsGetRequest {
	r.sort = &sort
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsGetExecute(r)
}

/*
CtdbPublicIpsGet Method for CtdbPublicIpsGet

Retrieve information about configured public IP addresses for the
ctdb cluster. This call raise a CallError with errno set to ENXIO
if this node is not in a state where it can provide accurate
information about cluster. Examples problematic states are:

- ctdb or glusterd are not running on this node

- ctdb shared volume is not mounted

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbPublicIpsApiCtdbPublicIpsGetRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGet(ctx context.Context) CtdbPublicIpsApiCtdbPublicIpsGetRequest {
	return CtdbPublicIpsApiCtdbPublicIpsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsGetExecute(r CtdbPublicIpsApiCtdbPublicIpsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	id         int32
}

func (r CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsIdIdGetExecute(r)
}

/*
CtdbPublicIpsIdIdGet Method for CtdbPublicIpsIdIdGet

Retrieve information about configured public IP addresses for the
ctdb cluster. This call raise a CallError with errno set to ENXIO
if this node is not in a state where it can provide accurate
information about cluster. Examples problematic states are:

- ctdb or glusterd are not running on this node

- ctdb shared volume is not mounted

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdGet(ctx context.Context, id int32) CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest {
	return CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdGetExecute(r CtdbPublicIpsApiCtdbPublicIpsIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest struct {
	ctx        context.Context
	ApiService *CtdbPublicIpsApiService
	id         int32
}

func (r CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsIdIdPutExecute(r)
}

/*
CtdbPublicIpsIdIdPut Method for CtdbPublicIpsIdIdPut

Update Public IP address in the ctdb cluster.
`pnn` - cluster node number
`ip` string representing the public ip address
`enable` boolean. When True, enable the node else disable the node.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdPut(ctx context.Context, id int32) CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest {
	return CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsIdIdPutExecute(r CtdbPublicIpsApiCtdbPublicIpsIdIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsIdIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest struct {
	ctx         context.Context
	ApiService  *CtdbPublicIpsApiService
	requestBody *[]string
}

func (r CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest) RequestBody(requestBody []string) CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest {
	r.requestBody = &requestBody
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsInterfaceChoicesPostExecute(r)
}

/*
CtdbPublicIpsInterfaceChoicesPost Method for CtdbPublicIpsInterfaceChoicesPost

Retrieve list of available interface choices that can be used for assigning a ctdbd public ip.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsInterfaceChoicesPost(ctx context.Context) CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest {
	return CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsInterfaceChoicesPostExecute(r CtdbPublicIpsApiCtdbPublicIpsInterfaceChoicesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsInterfaceChoicesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips/interface_choices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type CtdbPublicIpsApiCtdbPublicIpsPostRequest struct {
	ctx                  context.Context
	ApiService           *CtdbPublicIpsApiService
	ctdbPublicIpsCreate0 *CtdbPublicIpsCreate0
}

func (r CtdbPublicIpsApiCtdbPublicIpsPostRequest) CtdbPublicIpsCreate0(ctdbPublicIpsCreate0 CtdbPublicIpsCreate0) CtdbPublicIpsApiCtdbPublicIpsPostRequest {
	r.ctdbPublicIpsCreate0 = &ctdbPublicIpsCreate0
	return r
}

func (r CtdbPublicIpsApiCtdbPublicIpsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.CtdbPublicIpsPostExecute(r)
}

/*
CtdbPublicIpsPost Method for CtdbPublicIpsPost

Add a ctdb public address to the cluster

`pnn` node number of record to adjust
`ip` string representing an IP v4/v6 address
`netmask` integer representing a cidr notated netmask (i.e. 16/24/48/64 etc)
`interface` string representing a network interface to apply the `ip`

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CtdbPublicIpsApiCtdbPublicIpsPostRequest
*/
func (a *CtdbPublicIpsApiService) CtdbPublicIpsPost(ctx context.Context) CtdbPublicIpsApiCtdbPublicIpsPostRequest {
	return CtdbPublicIpsApiCtdbPublicIpsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *CtdbPublicIpsApiService) CtdbPublicIpsPostExecute(r CtdbPublicIpsApiCtdbPublicIpsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CtdbPublicIpsApiService.CtdbPublicIpsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ctdb/public/ips"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ctdbPublicIpsCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// TechnicalUser struct for TechnicalUser
type TechnicalUser struct {
	FirstName      *string `json:"first_name,omitempty"`
	LastName       *string `json:"last_name,omitempty"`
	Title          *string `json:"title,omitempty"`
	OfficePhone    *string `json:"office_phone,omitempty"`
	MobilePhone    *string `json:"mobile_phone,omitempty"`
	PrimaryEmail   *string `json:"primary_email,omitempty"`
	SecondaryEmail *string `json:"secondary_email,omitempty"`
	Address        *string `json:"address,omitempty"`
	City           *string `json:"city,omitempty"`
	State          *string `json:"state,omitempty"`
	Zip            *string `json:"zip,omitempty"`
	Country        *string `json:"country,omitempty"`
}

// NewTechnicalUser instantiates a new TechnicalUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechnicalUser() *TechnicalUser {
	this := TechnicalUser{}
	return &this
}

// NewTechnicalUserWithDefaults instantiates a new TechnicalUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechnicalUserWithDefaults() *TechnicalUser {
	this := TechnicalUser{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *TechnicalUser) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *TechnicalUser) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *TechnicalUser) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *TechnicalUser) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *TechnicalUser) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *TechnicalUser) SetLastName(v string) {
	o.LastName = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TechnicalUser) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TechnicalUser) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TechnicalUser) SetTitle(v string) {
	o.Title = &v
}

// GetOfficePhone returns the OfficePhone field value if set, zero value otherwise.
func (o *TechnicalUser) GetOfficePhone() string {
	if o == nil || o.OfficePhone == nil {
		var ret string
		return ret
	}
	return *o.OfficePhone
}

// GetOfficePhoneOk returns a tuple with the OfficePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetOfficePhoneOk() (*string, bool) {
	if o == nil || o.OfficePhone == nil {
		return nil, false
	}
	return o.OfficePhone, true
}

// HasOfficePhone returns a boolean if a field has been set.
func (o *TechnicalUser) HasOfficePhone() bool {
	if o != nil && o.OfficePhone != nil {
		return true
	}

	return false
}

// SetOfficePhone gets a reference to the given string and assigns it to the OfficePhone field.
func (o *TechnicalUser) SetOfficePhone(v string) {
	o.OfficePhone = &v
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise.
func (o *TechnicalUser) GetMobilePhone() string {
	if o == nil || o.MobilePhone == nil {
		var ret string
		return ret
	}
	return *o.MobilePhone
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetMobilePhoneOk() (*string, bool) {
	if o == nil || o.MobilePhone == nil {
		return nil, false
	}
	return o.MobilePhone, true
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *TechnicalUser) HasMobilePhone() bool {
	if o != nil && o.MobilePhone != nil {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given string and assigns it to the MobilePhone field.
func (o *TechnicalUser) SetMobilePhone(v string) {
	o.MobilePhone = &v
}

// GetPrimaryEmail returns the PrimaryEmail field value if set, zero value otherwise.
func (o *TechnicalUser) GetPrimaryEmail() string {
	if o == nil || o.PrimaryEmail == nil {
		var ret string
		return ret
	}
	return *o.PrimaryEmail
}

// GetPrimaryEmailOk returns a tuple with the PrimaryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetPrimaryEmailOk() (*string, bool) {
	if o == nil || o.PrimaryEmail == nil {
		return nil, false
	}
	return o.PrimaryEmail, true
}

// HasPrimaryEmail returns a boolean if a field has been set.
func (o *TechnicalUser) HasPrimaryEmail() bool {
	if o != nil && o.PrimaryEmail != nil {
		return true
	}

	return false
}

// SetPrimaryEmail gets a reference to the given string and assigns it to the PrimaryEmail field.
func (o *TechnicalUser) SetPrimaryEmail(v string) {
	o.PrimaryEmail = &v
}

// GetSecondaryEmail returns the SecondaryEmail field value if set, zero value otherwise.
func (o *TechnicalUser) GetSecondaryEmail() string {
	if o == nil || o.SecondaryEmail == nil {
		var ret string
		return ret
	}
	return *o.SecondaryEmail
}

// GetSecondaryEmailOk returns a tuple with the SecondaryEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetSecondaryEmailOk() (*string, bool) {
	if o == nil || o.SecondaryEmail == nil {
		return nil, false
	}
	return o.SecondaryEmail, true
}

// HasSecondaryEmail returns a boolean if a field has been set.
func (o *TechnicalUser) HasSecondaryEmail() bool {
	if o != nil && o.SecondaryEmail != nil {
		return true
	}

	return false
}

// SetSecondaryEmail gets a reference to the given string and assigns it to the SecondaryEmail field.
func (o *TechnicalUser) SetSecondaryEmail(v string) {
	o.SecondaryEmail = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *TechnicalUser) GetAddress() string {
	if o == nil || o.Address == nil {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetAddressOk() (*string, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *TechnicalUser) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *TechnicalUser) SetAddress(v string) {
	o.Address = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *TechnicalUser) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *TechnicalUser) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *TechnicalUser) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TechnicalUser) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TechnicalUser) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *TechnicalUser) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *TechnicalUser) GetZip() string {
	if o == nil || o.Zip == nil {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetZipOk() (*string, bool) {
	if o == nil || o.Zip == nil {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *TechnicalUser) HasZip() bool {
	if o != nil && o.Zip != nil {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *TechnicalUser) SetZip(v string) {
	o.Zip = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *TechnicalUser) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnicalUser) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *TechnicalUser) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *TechnicalUser) SetCountry(v string) {
	o.Country = &v
}

func (o TechnicalUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.OfficePhone != nil {
		toSerialize["office_phone"] = o.OfficePhone
	}
	if o.MobilePhone != nil {
		toSerialize["mobile_phone"] = o.MobilePhone
	}
	if o.PrimaryEmail != nil {
		toSerialize["primary_email"] = o.PrimaryEmail
	}
	if o.SecondaryEmail != nil {
		toSerialize["secondary_email"] = o.SecondaryEmail
	}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Zip != nil {
		toSerialize["zip"] = o.Zip
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableTechnicalUser struct {
	value *TechnicalUser
	isSet bool
}

func (v NullableTechnicalUser) Get() *TechnicalUser {
	return v.value
}

func (v *NullableTechnicalUser) Set(val *TechnicalUser) {
	v.value = val
	v.isSet = true
}

func (v NullableTechnicalUser) IsSet() bool {
	return v.isSet
}

func (v *NullableTechnicalUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechnicalUser(val *TechnicalUser) *NullableTechnicalUser {
	return &NullableTechnicalUser{value: val, isSet: true}
}

func (v NullableTechnicalUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechnicalUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

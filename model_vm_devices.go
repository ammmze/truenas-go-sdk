/*
 * TrueNAS RESTful API
 *
 * Go SDK for interacting with TrueNAS APIs (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// VMDevices struct for VMDevices
type VMDevices struct {
	Id                   int32                   `json:"id"`
	Dtype                string                  `json:"dtype"`
	Order                *int32                  `json:"order,omitempty"`
	Vm                   *int32                  `json:"vm,omitempty"`
	Attributes           *map[string]interface{} `json:"attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _VMDevices VMDevices

// NewVMDevices instantiates a new VMDevices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMDevices(id int32, dtype string) *VMDevices {
	this := VMDevices{}
	this.Id = id
	this.Dtype = dtype
	return &this
}

// NewVMDevicesWithDefaults instantiates a new VMDevices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMDevicesWithDefaults() *VMDevices {
	this := VMDevices{}
	return &this
}

// GetId returns the Id field value
func (o *VMDevices) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VMDevices) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VMDevices) SetId(v int32) {
	o.Id = v
}

// GetDtype returns the Dtype field value
func (o *VMDevices) GetDtype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dtype
}

// GetDtypeOk returns a tuple with the Dtype field value
// and a boolean to check if the value has been set.
func (o *VMDevices) GetDtypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dtype, true
}

// SetDtype sets field value
func (o *VMDevices) SetDtype(v string) {
	o.Dtype = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *VMDevices) GetOrder() int32 {
	if o == nil || o.Order == nil {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDevices) GetOrderOk() (*int32, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *VMDevices) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *VMDevices) SetOrder(v int32) {
	o.Order = &v
}

// GetVm returns the Vm field value if set, zero value otherwise.
func (o *VMDevices) GetVm() int32 {
	if o == nil || o.Vm == nil {
		var ret int32
		return ret
	}
	return *o.Vm
}

// GetVmOk returns a tuple with the Vm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDevices) GetVmOk() (*int32, bool) {
	if o == nil || o.Vm == nil {
		return nil, false
	}
	return o.Vm, true
}

// HasVm returns a boolean if a field has been set.
func (o *VMDevices) HasVm() bool {
	if o != nil && o.Vm != nil {
		return true
	}

	return false
}

// SetVm gets a reference to the given int32 and assigns it to the Vm field.
func (o *VMDevices) SetVm(v int32) {
	o.Vm = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *VMDevices) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMDevices) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *VMDevices) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *VMDevices) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

func (o VMDevices) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["dtype"] = o.Dtype
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Vm != nil {
		toSerialize["vm"] = o.Vm
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *VMDevices) UnmarshalJSON(bytes []byte) (err error) {
	varVMDevices := _VMDevices{}

	if err = json.Unmarshal(bytes, &varVMDevices); err == nil {
		*o = VMDevices(varVMDevices)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "dtype")
		delete(additionalProperties, "order")
		delete(additionalProperties, "vm")
		delete(additionalProperties, "attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVMDevices struct {
	value *VMDevices
	isSet bool
}

func (v NullableVMDevices) Get() *VMDevices {
	return v.value
}

func (v *NullableVMDevices) Set(val *VMDevices) {
	v.value = val
	v.isSet = true
}

func (v NullableVMDevices) IsSet() bool {
	return v.isSet
}

func (v *NullableVMDevices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMDevices(val *VMDevices) *NullableVMDevices {
	return &NullableVMDevices{value: val, isSet: true}
}

func (v NullableVMDevices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMDevices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

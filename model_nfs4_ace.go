/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"encoding/json"
)

// Nfs4Ace struct for Nfs4Ace
type Nfs4Ace struct {
	Tag   *string       `json:"tag,omitempty"`
	Id    NullableInt32 `json:"id,omitempty"`
	Type  *string       `json:"type,omitempty"`
	Perms *Perms        `json:"perms,omitempty"`
	Flags *Flags        `json:"flags,omitempty"`
}

// NewNfs4Ace instantiates a new Nfs4Ace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfs4Ace() *Nfs4Ace {
	this := Nfs4Ace{}
	return &this
}

// NewNfs4AceWithDefaults instantiates a new Nfs4Ace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfs4AceWithDefaults() *Nfs4Ace {
	this := Nfs4Ace{}
	return &this
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Nfs4Ace) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfs4Ace) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Nfs4Ace) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *Nfs4Ace) SetTag(v string) {
	o.Tag = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Nfs4Ace) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Nfs4Ace) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Nfs4Ace) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *Nfs4Ace) SetId(v int32) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *Nfs4Ace) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Nfs4Ace) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Nfs4Ace) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfs4Ace) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Nfs4Ace) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Nfs4Ace) SetType(v string) {
	o.Type = &v
}

// GetPerms returns the Perms field value if set, zero value otherwise.
func (o *Nfs4Ace) GetPerms() Perms {
	if o == nil || o.Perms == nil {
		var ret Perms
		return ret
	}
	return *o.Perms
}

// GetPermsOk returns a tuple with the Perms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfs4Ace) GetPermsOk() (*Perms, bool) {
	if o == nil || o.Perms == nil {
		return nil, false
	}
	return o.Perms, true
}

// HasPerms returns a boolean if a field has been set.
func (o *Nfs4Ace) HasPerms() bool {
	if o != nil && o.Perms != nil {
		return true
	}

	return false
}

// SetPerms gets a reference to the given Perms and assigns it to the Perms field.
func (o *Nfs4Ace) SetPerms(v Perms) {
	o.Perms = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *Nfs4Ace) GetFlags() Flags {
	if o == nil || o.Flags == nil {
		var ret Flags
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nfs4Ace) GetFlagsOk() (*Flags, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *Nfs4Ace) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given Flags and assigns it to the Flags field.
func (o *Nfs4Ace) SetFlags(v Flags) {
	o.Flags = &v
}

func (o Nfs4Ace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Perms != nil {
		toSerialize["perms"] = o.Perms
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	return json.Marshal(toSerialize)
}

type NullableNfs4Ace struct {
	value *Nfs4Ace
	isSet bool
}

func (v NullableNfs4Ace) Get() *Nfs4Ace {
	return v.value
}

func (v *NullableNfs4Ace) Set(val *Nfs4Ace) {
	v.value = val
	v.isSet = true
}

func (v NullableNfs4Ace) IsSet() bool {
	return v.isSet
}

func (v *NullableNfs4Ace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfs4Ace(val *Nfs4Ace) *NullableNfs4Ace {
	return &NullableNfs4Ace{value: val, isSet: true}
}

func (v NullableNfs4Ace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfs4Ace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

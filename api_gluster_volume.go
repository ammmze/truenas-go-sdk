/*
TrueNAS RESTful API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package truenas

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// GlusterVolumeApiService GlusterVolumeApi service
type GlusterVolumeApiService service

type GlusterVolumeApiGlusterVolumeAddbrickPostRequest struct {
	ctx                    context.Context
	ApiService             *GlusterVolumeApiService
	glusterVolumeAddbrick0 *GlusterVolumeAddbrick0
}

func (r GlusterVolumeApiGlusterVolumeAddbrickPostRequest) GlusterVolumeAddbrick0(glusterVolumeAddbrick0 GlusterVolumeAddbrick0) GlusterVolumeApiGlusterVolumeAddbrickPostRequest {
	r.glusterVolumeAddbrick0 = &glusterVolumeAddbrick0
	return r
}

func (r GlusterVolumeApiGlusterVolumeAddbrickPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeAddbrickPostExecute(r)
}

/*
GlusterVolumeAddbrickPost Method for GlusterVolumeAddbrickPost

Add bricks to a gluster volume.

`name` String representing name of gluster volume
`bricks` List representing the brick paths
    `peer_name` String representing IP or DNS name of the peer
    `peer_path` String representing the full path of the brick
`replica` Integer replicating replica count
`arbiter` Integer replicating arbiter count
`force` Boolean, if True, forcefully add brick(s)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeAddbrickPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeAddbrickPost(ctx context.Context) GlusterVolumeApiGlusterVolumeAddbrickPostRequest {
	return GlusterVolumeApiGlusterVolumeAddbrickPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeAddbrickPostExecute(r GlusterVolumeApiGlusterVolumeAddbrickPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeAddbrickPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/addbrick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeAddbrick0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	limit      *int32
	offset     *int32
	count      *bool
	sort       *string
}

func (r GlusterVolumeApiGlusterVolumeGetRequest) Limit(limit int32) GlusterVolumeApiGlusterVolumeGetRequest {
	r.limit = &limit
	return r
}

func (r GlusterVolumeApiGlusterVolumeGetRequest) Offset(offset int32) GlusterVolumeApiGlusterVolumeGetRequest {
	r.offset = &offset
	return r
}

func (r GlusterVolumeApiGlusterVolumeGetRequest) Count(count bool) GlusterVolumeApiGlusterVolumeGetRequest {
	r.count = &count
	return r
}

func (r GlusterVolumeApiGlusterVolumeGetRequest) Sort(sort string) GlusterVolumeApiGlusterVolumeGetRequest {
	r.sort = &sort
	return r
}

func (r GlusterVolumeApiGlusterVolumeGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeGetExecute(r)
}

/*
GlusterVolumeGet Method for GlusterVolumeGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeGet(ctx context.Context) GlusterVolumeApiGlusterVolumeGetRequest {
	return GlusterVolumeApiGlusterVolumeGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeGetExecute(r GlusterVolumeApiGlusterVolumeGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeIdIdDeleteRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	id         string
}

func (r GlusterVolumeApiGlusterVolumeIdIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeIdIdDeleteExecute(r)
}

/*
GlusterVolumeIdIdDelete Method for GlusterVolumeIdIdDelete

Delete a gluster volume.

`id` String representing name of gluster volume
        to be deleted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return GlusterVolumeApiGlusterVolumeIdIdDeleteRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeIdIdDelete(ctx context.Context, id string) GlusterVolumeApiGlusterVolumeIdIdDeleteRequest {
	return GlusterVolumeApiGlusterVolumeIdIdDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeIdIdDeleteExecute(r GlusterVolumeApiGlusterVolumeIdIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeIdIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeIdIdGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
	id         string
}

func (r GlusterVolumeApiGlusterVolumeIdIdGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeIdIdGetExecute(r)
}

/*
GlusterVolumeIdIdGet Method for GlusterVolumeIdIdGet

`query-options.extra` can be specified as query parameters with prefixing them with `extra.` prefix. For example, `extra.retrieve_properties=false` will pass `retrieve_properties` as an extra argument to pool/dataset endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return GlusterVolumeApiGlusterVolumeIdIdGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeIdIdGet(ctx context.Context, id string) GlusterVolumeApiGlusterVolumeIdIdGetRequest {
	return GlusterVolumeApiGlusterVolumeIdIdGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeIdIdGetExecute(r GlusterVolumeApiGlusterVolumeIdIdGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeIdIdGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/id/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeInfoPostRequest struct {
	ctx                context.Context
	ApiService         *GlusterVolumeApiService
	glusterVolumeInfo0 *GlusterVolumeInfo0
}

func (r GlusterVolumeApiGlusterVolumeInfoPostRequest) GlusterVolumeInfo0(glusterVolumeInfo0 GlusterVolumeInfo0) GlusterVolumeApiGlusterVolumeInfoPostRequest {
	r.glusterVolumeInfo0 = &glusterVolumeInfo0
	return r
}

func (r GlusterVolumeApiGlusterVolumeInfoPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeInfoPostExecute(r)
}

/*
GlusterVolumeInfoPost Method for GlusterVolumeInfoPost

Return information about gluster volume(s).

`name` String representing name of gluster volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeInfoPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeInfoPost(ctx context.Context) GlusterVolumeApiGlusterVolumeInfoPostRequest {
	return GlusterVolumeApiGlusterVolumeInfoPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeInfoPostExecute(r GlusterVolumeApiGlusterVolumeInfoPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeInfoPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeInfo0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeListGetRequest struct {
	ctx        context.Context
	ApiService *GlusterVolumeApiService
}

func (r GlusterVolumeApiGlusterVolumeListGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeListGetExecute(r)
}

/*
GlusterVolumeListGet Method for GlusterVolumeListGet

Return list of gluster volumes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeListGetRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeListGet(ctx context.Context) GlusterVolumeApiGlusterVolumeListGetRequest {
	return GlusterVolumeApiGlusterVolumeListGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeListGetExecute(r GlusterVolumeApiGlusterVolumeListGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeListGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeOptresetPostRequest struct {
	ctx                    context.Context
	ApiService             *GlusterVolumeApiService
	glusterVolumeOptreset0 *GlusterVolumeOptreset0
}

func (r GlusterVolumeApiGlusterVolumeOptresetPostRequest) GlusterVolumeOptreset0(glusterVolumeOptreset0 GlusterVolumeOptreset0) GlusterVolumeApiGlusterVolumeOptresetPostRequest {
	r.glusterVolumeOptreset0 = &glusterVolumeOptreset0
	return r
}

func (r GlusterVolumeApiGlusterVolumeOptresetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeOptresetPostExecute(r)
}

/*
GlusterVolumeOptresetPost Method for GlusterVolumeOptresetPost

Reset volumes options.
    If `opt` is not provided, then all options
    will be reset.

`name` String representing name of gluster volume
`opt` String representing name of the option to reset
`force` Boolean, if True forcefully reset option(s)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeOptresetPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeOptresetPost(ctx context.Context) GlusterVolumeApiGlusterVolumeOptresetPostRequest {
	return GlusterVolumeApiGlusterVolumeOptresetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeOptresetPostExecute(r GlusterVolumeApiGlusterVolumeOptresetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeOptresetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/optreset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeOptreset0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeOptsetPostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeOptset0 *GlusterVolumeOptset0
}

func (r GlusterVolumeApiGlusterVolumeOptsetPostRequest) GlusterVolumeOptset0(glusterVolumeOptset0 GlusterVolumeOptset0) GlusterVolumeApiGlusterVolumeOptsetPostRequest {
	r.glusterVolumeOptset0 = &glusterVolumeOptset0
	return r
}

func (r GlusterVolumeApiGlusterVolumeOptsetPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeOptsetPostExecute(r)
}

/*
GlusterVolumeOptsetPost Method for GlusterVolumeOptsetPost

Set gluster volume options.

`name` String representing name of gluster volume
`opts` Dict where
    --key-- is the name of the option
    --value-- is the value to be given to the option

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeOptsetPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeOptsetPost(ctx context.Context) GlusterVolumeApiGlusterVolumeOptsetPostRequest {
	return GlusterVolumeApiGlusterVolumeOptsetPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeOptsetPostExecute(r GlusterVolumeApiGlusterVolumeOptsetPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeOptsetPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/optset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeOptset0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumePostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeCreate0 *GlusterVolumeCreate0
}

func (r GlusterVolumeApiGlusterVolumePostRequest) GlusterVolumeCreate0(glusterVolumeCreate0 GlusterVolumeCreate0) GlusterVolumeApiGlusterVolumePostRequest {
	r.glusterVolumeCreate0 = &glusterVolumeCreate0
	return r
}

func (r GlusterVolumeApiGlusterVolumePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumePostExecute(r)
}

/*
GlusterVolumePost Method for GlusterVolumePost

Create a gluster volume.

`name` String representing name to be given to the volume
`bricks` List representing the brick paths
    `peer_name` String representing IP or DNS name of the peer
    `peer_path` String representing the full path of the brick

`replica` Integer representing number of replica bricks
`arbiter` Integer representing number of arbiter bricks
`disperse` Integer representing number of disperse bricks
`disperse_data` Integer representing number of disperse data bricks
`redundancy` Integer representing number of redundancy bricks
`force` Boolean, if True ignore potential warnings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumePostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumePost(ctx context.Context) GlusterVolumeApiGlusterVolumePostRequest {
	return GlusterVolumeApiGlusterVolumePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumePostExecute(r GlusterVolumeApiGlusterVolumePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeCreate0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeQuotaPostRequest struct {
	ctx                 context.Context
	ApiService          *GlusterVolumeApiService
	glusterVolumeQuota0 *GlusterVolumeQuota0
}

func (r GlusterVolumeApiGlusterVolumeQuotaPostRequest) GlusterVolumeQuota0(glusterVolumeQuota0 GlusterVolumeQuota0) GlusterVolumeApiGlusterVolumeQuotaPostRequest {
	r.glusterVolumeQuota0 = &glusterVolumeQuota0
	return r
}

func (r GlusterVolumeApiGlusterVolumeQuotaPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeQuotaPostExecute(r)
}

/*
GlusterVolumeQuotaPost Method for GlusterVolumeQuotaPost

Enable/Disable the quota for a given gluster volume.

`name` String representing name of gluster volume
`enable` Boolean, if True enable quota else disable it

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeQuotaPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeQuotaPost(ctx context.Context) GlusterVolumeApiGlusterVolumeQuotaPostRequest {
	return GlusterVolumeApiGlusterVolumeQuotaPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeQuotaPostExecute(r GlusterVolumeApiGlusterVolumeQuotaPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeQuotaPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/quota"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeQuota0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeRemovebrickPostRequest struct {
	ctx                       context.Context
	ApiService                *GlusterVolumeApiService
	glusterVolumeRemovebrick0 *GlusterVolumeRemovebrick0
}

func (r GlusterVolumeApiGlusterVolumeRemovebrickPostRequest) GlusterVolumeRemovebrick0(glusterVolumeRemovebrick0 GlusterVolumeRemovebrick0) GlusterVolumeApiGlusterVolumeRemovebrickPostRequest {
	r.glusterVolumeRemovebrick0 = &glusterVolumeRemovebrick0
	return r
}

func (r GlusterVolumeApiGlusterVolumeRemovebrickPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeRemovebrickPostExecute(r)
}

/*
GlusterVolumeRemovebrickPost Method for GlusterVolumeRemovebrickPost

Perform a remove operation on the brick(s) in the gluster volume.

`name` String representing name of gluster volume
`bricks` List representing the brick paths
    `peer_name` String representing IP or DNS name of the peer
    `peer_path` String representing the full path of the brick
`operation` String representing the operation to be performed
    `START` Start the removal of the brick(s)
    `STOP` Stop the removal of the brick(s)
    `COMMIT` Commit the removal of the brick(s)
    `STATUS` Display status of the removal of the brick(s)
    `FORCE` Force the removal of the brick(s)
`replica` Integer representing replica count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeRemovebrickPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeRemovebrickPost(ctx context.Context) GlusterVolumeApiGlusterVolumeRemovebrickPostRequest {
	return GlusterVolumeApiGlusterVolumeRemovebrickPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeRemovebrickPostExecute(r GlusterVolumeApiGlusterVolumeRemovebrickPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeRemovebrickPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/removebrick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeRemovebrick0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeReplacebrickPostRequest struct {
	ctx                        context.Context
	ApiService                 *GlusterVolumeApiService
	glusterVolumeReplacebrick0 *GlusterVolumeReplacebrick0
}

func (r GlusterVolumeApiGlusterVolumeReplacebrickPostRequest) GlusterVolumeReplacebrick0(glusterVolumeReplacebrick0 GlusterVolumeReplacebrick0) GlusterVolumeApiGlusterVolumeReplacebrickPostRequest {
	r.glusterVolumeReplacebrick0 = &glusterVolumeReplacebrick0
	return r
}

func (r GlusterVolumeApiGlusterVolumeReplacebrickPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeReplacebrickPostExecute(r)
}

/*
GlusterVolumeReplacebrickPost Method for GlusterVolumeReplacebrickPost

Commit the replacement of a brick.

`name` String representing name of gluster volume
`src_brick` Dict where
    `peer_name` key is a string representing IP or DNS name of the peer
    `peer_path` key is a string representing the full path of the brick
`new_brick` Dict where
    `peer_name` key is a string representing IP or DNS name of the peer
    `peer_path` key is a string representing the full path of the brick

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeReplacebrickPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeReplacebrickPost(ctx context.Context) GlusterVolumeApiGlusterVolumeReplacebrickPostRequest {
	return GlusterVolumeApiGlusterVolumeReplacebrickPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeReplacebrickPostExecute(r GlusterVolumeApiGlusterVolumeReplacebrickPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeReplacebrickPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/replacebrick"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeReplacebrick0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeRestartPostRequest struct {
	ctx                   context.Context
	ApiService            *GlusterVolumeApiService
	glusterVolumeRestart0 *GlusterVolumeRestart0
}

func (r GlusterVolumeApiGlusterVolumeRestartPostRequest) GlusterVolumeRestart0(glusterVolumeRestart0 GlusterVolumeRestart0) GlusterVolumeApiGlusterVolumeRestartPostRequest {
	r.glusterVolumeRestart0 = &glusterVolumeRestart0
	return r
}

func (r GlusterVolumeApiGlusterVolumeRestartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeRestartPostExecute(r)
}

/*
GlusterVolumeRestartPost Method for GlusterVolumeRestartPost

Restart a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully restart the gluster volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeRestartPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeRestartPost(ctx context.Context) GlusterVolumeApiGlusterVolumeRestartPostRequest {
	return GlusterVolumeApiGlusterVolumeRestartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeRestartPostExecute(r GlusterVolumeApiGlusterVolumeRestartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeRestartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/restart"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeRestart0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeStartPostRequest struct {
	ctx                 context.Context
	ApiService          *GlusterVolumeApiService
	glusterVolumeStart0 *GlusterVolumeStart0
}

func (r GlusterVolumeApiGlusterVolumeStartPostRequest) GlusterVolumeStart0(glusterVolumeStart0 GlusterVolumeStart0) GlusterVolumeApiGlusterVolumeStartPostRequest {
	r.glusterVolumeStart0 = &glusterVolumeStart0
	return r
}

func (r GlusterVolumeApiGlusterVolumeStartPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStartPostExecute(r)
}

/*
GlusterVolumeStartPost Method for GlusterVolumeStartPost

Start a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully start the gluster volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeStartPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStartPost(ctx context.Context) GlusterVolumeApiGlusterVolumeStartPostRequest {
	return GlusterVolumeApiGlusterVolumeStartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStartPostExecute(r GlusterVolumeApiGlusterVolumeStartPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStartPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStart0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeStatusPostRequest struct {
	ctx                  context.Context
	ApiService           *GlusterVolumeApiService
	glusterVolumeStatus0 *GlusterVolumeStatus0
}

func (r GlusterVolumeApiGlusterVolumeStatusPostRequest) GlusterVolumeStatus0(glusterVolumeStatus0 GlusterVolumeStatus0) GlusterVolumeApiGlusterVolumeStatusPostRequest {
	r.glusterVolumeStatus0 = &glusterVolumeStatus0
	return r
}

func (r GlusterVolumeApiGlusterVolumeStatusPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStatusPostExecute(r)
}

/*
GlusterVolumeStatusPost Method for GlusterVolumeStatusPost

Return detailed information about gluster volume.

`name` String representing name of gluster volume
`verbose` Boolean, If False, only return brick information

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeStatusPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStatusPost(ctx context.Context) GlusterVolumeApiGlusterVolumeStatusPostRequest {
	return GlusterVolumeApiGlusterVolumeStatusPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStatusPostExecute(r GlusterVolumeApiGlusterVolumeStatusPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStatusPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStatus0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type GlusterVolumeApiGlusterVolumeStopPostRequest struct {
	ctx                context.Context
	ApiService         *GlusterVolumeApiService
	glusterVolumeStop0 *GlusterVolumeStop0
}

func (r GlusterVolumeApiGlusterVolumeStopPostRequest) GlusterVolumeStop0(glusterVolumeStop0 GlusterVolumeStop0) GlusterVolumeApiGlusterVolumeStopPostRequest {
	r.glusterVolumeStop0 = &glusterVolumeStop0
	return r
}

func (r GlusterVolumeApiGlusterVolumeStopPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.GlusterVolumeStopPostExecute(r)
}

/*
GlusterVolumeStopPost Method for GlusterVolumeStopPost

Stop a gluster volume.

`name` String representing name of gluster volume
`force` Boolean, if True forcefully stop the gluster volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GlusterVolumeApiGlusterVolumeStopPostRequest
*/
func (a *GlusterVolumeApiService) GlusterVolumeStopPost(ctx context.Context) GlusterVolumeApiGlusterVolumeStopPostRequest {
	return GlusterVolumeApiGlusterVolumeStopPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *GlusterVolumeApiService) GlusterVolumeStopPostExecute(r GlusterVolumeApiGlusterVolumeStopPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GlusterVolumeApiService.GlusterVolumeStopPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/gluster/volume/stop"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.glusterVolumeStop0
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
